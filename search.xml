<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于RSS的一些想法</title>
    <url>/thinking-about-rss/</url>
    <content><![CDATA[<h1 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h1><p>个人理解：一个网站发布内容，用户自行选择内容接受</p>
<h1 id="网站生成RSS"><a href="#网站生成RSS" class="headerlink" title="网站生成RSS"></a>网站生成RSS</h1><p>hexo插件生成 <a href="/atom.xml">本网站RSS</a></p>
<h1 id="APP的选择"><a href="#APP的选择" class="headerlink" title="APP的选择"></a>APP的选择</h1><p>暂无</p>
<h1 id="源管理-推荐"><a href="#源管理-推荐" class="headerlink" title="源管理/推荐"></a>源管理/推荐</h1><p>害，现在能有啥简单的阅读呢</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/about-me/</url>
    <content><![CDATA[<h1 id="关于我（wiidede）"><a href="#关于我（wiidede）" class="headerlink" title="关于我（wiidede）"></a>关于我（wiidede）</h1><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>出生：1999年</p>
<p>专业：物联网工程</p>
<p>酷安ID：DD王</p>
<p>github: <a href="http://github.com/wiidede">wiidede</a></p>
<h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>大学：家庭服务机器人项目（ROS、深度学习）</p>
<p>某监控公司：实习中，前端</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>wiidede</tag>
      </tags>
  </entry>
  <entry>
    <title>网站ToDo</title>
    <url>/blog-todo-list/</url>
    <content><![CDATA[<h1 id="网站ToDo"><a href="#网站ToDo" class="headerlink" title="网站ToDo"></a>网站ToDo</h1><ul>
<li><input checked="" disabled="" type="checkbox"> hexo-SEO优化，参考Ayer主题作者的<a href="https://shen-yu.gitee.io/2020/hexo-seo/">文章</a></li>
<li><input disabled="" type="checkbox"> 评论邮箱提醒，使用第三方插件</li>
<li><input checked="" disabled="" type="checkbox"> 关于的页面，以及侧边栏导航</li>
<li><input checked="" disabled="" type="checkbox"> 打赏仅在指定文章出现</li>
</ul>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>ToDo</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式 向前最短匹配</title>
    <url>/reg-about-match-the-forward/</url>
    <content><![CDATA[<h1 id="正则表达式-向前最短匹配"><a href="#正则表达式-向前最短匹配" class="headerlink" title="正则表达式 向前最短匹配"></a>正则表达式 向前最短匹配</h1><p>使用正则表达式  <code>.*?</code>  可以向后匹配最短的，那么如何向前匹配最短的呢</p>
<p>向前的不再能使用 <code>.*?</code> ，因为它会从第一个字母向后找，直到有匹配的，也就相当于找了一个最长的匹配</p>
<p>所以这时候应该换一种思路</p>
<p>使用 <code>a[^a]+</code> 来匹配，也就是说要匹配的字符串前面不能有a，那就是最短的匹配</p>
<p>我们来看一个 Python 写的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reg = <span class="string">r&#x27;```[^```]+&#x27;</span> + clipContent + <span class="string">r&#x27;.*?```&#x27;</span></span><br></pre></td></tr></table></figure>

<p>我们要从 <code>clipContent</code> 向前找到第一次出现 ```` ` ，所以思路应该是向前找到第一个你所想要的内容</p>
<p><a href="/listen-the-clipboard-and-match">这里</a>有一个实际案例</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>监听剪贴板 在文字中匹配相应的内容 适用于题库</title>
    <url>/listen-the-clipboard-and-match/</url>
    <content><![CDATA[<h1 id="监听剪贴板-在文字中匹配相应的内容-适用于题库"><a href="#监听剪贴板-在文字中匹配相应的内容-适用于题库" class="headerlink" title="监听剪贴板 在文字中匹配相应的内容 适用于题库"></a>监听剪贴板 在文字中匹配相应的内容 适用于题库</h1><p>最近有考试，还有题库，我就把之前写的监听剪贴板来搜索题库的程序拿了出来。虽然可能你更希望直接帮你答好，但有些网站只有一次考试机会，所以监听剪贴板反而更通用，虽然你 <code>ctrl + c</code> 可能会按的有点累，但总比一题一题搜（<code>ctrl + c</code> <code>切换到题库</code> <code>ctrl + f</code>   <code>ctrl + v</code>）快一点</p>
<p>当然如果你有更好的方法也可以留言或者告诉我</p>
<p>注意，如果网页不让你复制，不让你选择文字，请先安装油猴插件，再安装<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits-modified">文字限制解除</a></p>
<p>话不多说，很简单的代码直接上了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    lastClipContent = <span class="literal">None</span></span><br><span class="line">    txt = open(<span class="string">&quot;xxxxxxxxxxxxx题库.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        clipContent = pyperclip.paste()</span><br><span class="line">        <span class="keyword">if</span> clipContent != lastClipContent:</span><br><span class="line">            lastClipContent = clipContent</span><br><span class="line">            reg = <span class="string">r&#x27;```[^```]+&#x27;</span> + clipContent + <span class="string">r&#x27;.*?```&#x27;</span></span><br><span class="line">            regPattern = re.compile(reg, re.S | re.M)</span><br><span class="line">            result = regPattern.findall(txt)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                print(<span class="string">&#x27;\n\n------------------------&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">                    print(item.replace(<span class="string">&#x27;```&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">                print(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>其中关于正则表示的原理可以参考<a href="/reg-about-match-the-forward">这里</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>Python</tag>
        <tag>监听剪贴板</tag>
      </tags>
  </entry>
  <entry>
    <title>git 本地切换帐号</title>
    <url>/git-change-local-account/</url>
    <content><![CDATA[<h1 id="git-切换本地帐号"><a href="#git-切换本地帐号" class="headerlink" title="git 切换本地帐号"></a>git 切换本地帐号</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name wiidede</span><br><span class="line">git config --<span class="built_in">local</span> user.email wiixdede@gmail.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>整理一些css样式</title>
    <url>/several-css-style/</url>
    <content><![CDATA[<h1 id="整理一些css样式"><a href="#整理一些css样式" class="headerlink" title="整理一些css样式"></a>整理一些css样式</h1><h2 id="渐变文字"><a href="#渐变文字" class="headerlink" title="渐变文字"></a>渐变文字</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">360deg</span>, #<span class="number">97</span>E9FF <span class="number">0%</span>, #FFFFFF <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">    <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">24</span>, <span class="number">230</span>, <span class="number">255</span>, <span class="number">0.63</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适应多种情况的自动换行"><a href="#适应多种情况的自动换行" class="headerlink" title="适应多种情况的自动换行"></a>适应多种情况的自动换行</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">    <span class="attribute">white-space</span>: pre-wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单行超出内容省略"><a href="#单行超出内容省略" class="headerlink" title="单行超出内容省略"></a>单行超出内容省略</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小天才的margin呢"><a href="#小天才的margin呢" class="headerlink" title="小天才的margin呢"></a>小天才的margin呢</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.iconfont</span> + <span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 任意两个连续的 `iconfont` 类中后面一个添加 `margin-left` 属性 */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>vue隔代组件层层动态插槽并且附带数据</title>
    <url>/vue-slot-with-two-generation/</url>
    <content><![CDATA[<h1 id="vue隔代组件层层动态插槽并且附带数据"><a href="#vue隔代组件层层动态插槽并且附带数据" class="headerlink" title="vue隔代组件层层动态插槽并且附带数据"></a>vue隔代组件层层动态插槽并且附带数据</h1><p>最近写代码，孙子组件有插槽，想要在爷爷组件里面往孙子组件里面插东西，发现插不进去，于是在父组件也建立了一个插槽。</p>
<p>比较特殊的地方在于这个插槽的名字是动态的，而且可能不止一个（v-for根据数据循环判断有多少插槽）</p>
<h2 id="孙子组件"><a href="#孙子组件" class="headerlink" title="孙子组件"></a>孙子组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;(item,index) in config&quot; :key&#x3D;index&gt;</span><br><span class="line">	&lt;span v-if&#x3D;&quot;item.custom&quot;&gt;</span><br><span class="line">        &lt;slot :name&#x3D;&quot;item.custom&quot; :value&#x3D;&quot;item.key&quot; :index&#x3D;&quot;index&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">	&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，孙子组件的具名插槽的名字是动态的，其实也就是由爷爷组件提供的</p>
<h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template v-for&#x3D;&quot;item in config&quot; v-slot:[item]&#x3D;&quot;value&quot;&gt;</span><br><span class="line">	&lt;slot :name&#x3D;&quot;item&quot; :value&#x3D;&quot;value.value&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>父组件是一个桥梁，根据数据得到相应需要有的插槽数来创建模板插入孙子组件，由于孙子组件的插槽名是动态的，所以，这里使用v-slot指令，插槽名为item对应的值，同时附带孙子组件的value值。</p>
<p>而模板里面又是一个插槽供爷爷组件进行插入，名字依旧是动态的item的值，附带从孙子组件得到的value</p>
<h2 id="爷爷组件"><a href="#爷爷组件" class="headerlink" title="爷爷组件"></a>爷爷组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template v-slot:slot-name-one&#x3D;&quot;value&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;slot-name-one&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;value&quot;&gt;&#123;&#123; value.value &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;value&quot;&gt;&#123;&#123; value.value &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;template v-slot:slot-name-two&#x3D;&quot;value&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;slot-name-two&quot;&gt;</span><br><span class="line">        &lt;div :class&#x3D;&quot;value.value &#x3D;&#x3D;&#x3D; &#39;a&#39; ? &#39;a&#39; : &#39;other&#39;&quot;&gt;&#123;&#123; value.value &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>这样爷爷组件就可以尽情的往孙子组件插入了</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>slot</tag>
      </tags>
  </entry>
  <entry>
    <title>vue判断字符串是否溢出来显示弹窗</title>
    <url>/vue-auto-show-tooltip/</url>
    <content><![CDATA[<h1 id="vue判断字符串是否溢出来显示弹窗"><a href="#vue判断字符串是否溢出来显示弹窗" class="headerlink" title="vue判断字符串是否溢出来显示弹窗"></a>vue判断字符串是否溢出来显示弹窗</h1><p>总体的思路就是获取dom元素，根据dom元素的 <code>clientWidth</code> 与 <code>scrollWidth</code> 来判断是否溢出，我这里正好碰到v-for，所以需要动态绑定每一个元素的ref</p>
<h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">    &lt;el-tooltip</span><br><span class="line">                :disabled&#x3D;&quot;isOverflow($refs[item.id])&quot;</span><br><span class="line">                :content&#x3D;&quot;&#96;$&#123;item.content&#125;&#96;&quot;</span><br><span class="line">                effect&#x3D;&quot;dark&quot;</span><br><span class="line">                placement&#x3D;&quot;top&quot;&gt;</span><br><span class="line">        &lt;span :ref&#x3D;&quot;item.id&quot;&gt;&#123;&#123; item.content &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-tooltip&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="处理函数-isOverflow"><a href="#处理函数-isOverflow" class="headerlink" title="处理函数 isOverflow"></a>处理函数 isOverflow</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">isOverflow(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> element ? element[<span class="number">0</span>].clientWidth &gt;= element[<span class="number">0</span>].scrollWidth : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>elementUI</tag>
        <tag>tooltip</tag>
      </tags>
  </entry>
  <entry>
    <title>整理一些js写法</title>
    <url>/several-js-grammar/</url>
    <content><![CDATA[<h1 id="整理一些js写法"><a href="#整理一些js写法" class="headerlink" title="整理一些js写法"></a>整理一些js写法</h1><h2 id="从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程"><a href="#从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程" class="headerlink" title="从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程"></a>从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程</h2><p>说到底是Array的find()、filter()方法</p>
<p>find返回的是数组里第一个符合条件的选项，</p>
<p>filter返回的是数组里符合条件的选项集合，是一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="filter-其他用法"><a href="#filter-其他用法" class="headerlink" title="filter 其他用法"></a>filter 其他用法</h2><h3 id="去掉数组中值为index的项目"><a href="#去掉数组中值为index的项目" class="headerlink" title="去掉数组中值为index的项目"></a>去掉数组中值为index的项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.arr = <span class="built_in">this</span>.arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== index);</span><br></pre></td></tr></table></figure>

<h3 id="判断数组中有没有值为index的项目"><a href="#判断数组中有没有值为index的项目" class="headerlink" title="判断数组中有没有值为index的项目"></a>判断数组中有没有值为index的项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item === index).length !== <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="反转对象的key和value的值"><a href="#反转对象的key和value的值" class="headerlink" title="反转对象的key和value的值"></a>反转对象的key和value的值</h2><p>如果直接将对象传进去，将会改变原有对象，建议传{…obj}进去</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reverseKV(obj) &#123;</span><br><span class="line"> <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value = obj[k];</span><br><span class="line">  obj[value] = k;</span><br><span class="line">  <span class="keyword">delete</span> obj[k];</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找数组中，对象某个属性值为val的索引-index"><a href="#查找数组中，对象某个属性值为val的索引-index" class="headerlink" title="查找数组中，对象某个属性值为val的索引(index)"></a>查找数组中，对象某个属性值为val的索引(index)</h2><p>优雅一点，可以用lodash的findIndex()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">findElem(arrayToSearch, attr, val) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrayToSearch.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arrayToSearch[i][attr] === val) &#123;</span><br><span class="line">   <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断页面上的字符是否溢出"><a href="#判断页面上的字符是否溢出" class="headerlink" title="判断页面上的字符是否溢出"></a>判断页面上的字符是否溢出</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">isOverflow(element) &#123;</span><br><span class="line"> <span class="keyword">return</span> element ? element[<span class="number">0</span>].offsetWidth &gt;= element[<span class="number">0</span>].scrollWidth : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>集成为一个<a href="/several-vue-grammar/#%E6%BA%A2%E5%87%BA%E8%87%AA%E5%8A%A8%E6%98%BE%E7%A4%BAtooltip%E7%9A%84%E7%BB%84%E4%BB%B6">vue组件</a></p>
<h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">timeFormat(value) &#123;</span><br><span class="line"> <span class="keyword">return</span> value === <span class="number">0</span> ? <span class="string">&#x27;-&#x27;</span> : moment(value).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法"><a href="#事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法" class="headerlink" title="事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法"></a>事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//firefox event.offsetX 时常为0</span></span><br><span class="line"><span class="comment">// let ox = event.offsetX; //</span></span><br><span class="line"><span class="comment">// let oy = event.offsetY;</span></span><br><span class="line"><span class="keyword">let</span> srcObj = event.target || event.srcElement;</span><br><span class="line"><span class="keyword">let</span> ox = event.offsetX || (event.clientX - srcObj.getBoundingClientRect().left);</span><br><span class="line"><span class="keyword">let</span> oy = event.offsetY || (event.clientY - srcObj.getBoundingClientRect().top);</span><br></pre></td></tr></table></figure>

<h2 id="div支持拖动并限制四周不超过浏览器页面"><a href="#div支持拖动并限制四周不超过浏览器页面" class="headerlink" title="div支持拖动并限制四周不超过浏览器页面"></a>div支持拖动并限制四周不超过浏览器页面</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">move(e) &#123;</span><br><span class="line">    <span class="keyword">let</span> draggableElement = <span class="built_in">this</span>.$refs[<span class="string">&#x27;popper&#x27;</span>] || e.target;        <span class="comment">//获取目标元素</span></span><br><span class="line">    <span class="comment">// 算出鼠标相对元素的位置</span></span><br><span class="line">    <span class="keyword">let</span> disX = e.clientX - draggableElement.offsetLeft;</span><br><span class="line">    <span class="keyword">let</span> disY = e.clientY - draggableElement.offsetTop;</span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;       <span class="comment">//鼠标按下并移动的事件</span></span><br><span class="line">        <span class="comment">// 用鼠标的位置减去鼠标相对元素的位置，得到元素的位置</span></span><br><span class="line">        <span class="keyword">let</span> left = e.clientX - disX;</span><br><span class="line">        <span class="keyword">let</span> top = e.clientY - disY;</span><br><span class="line">        <span class="keyword">let</span> bottom = <span class="built_in">window</span>.innerHeight - draggableElement.offsetHeight;</span><br><span class="line">        <span class="keyword">let</span> right = <span class="built_in">window</span>.innerWidth - draggableElement.offsetWidth;</span><br><span class="line">        <span class="comment">// 限制拖出页面</span></span><br><span class="line">        top &lt;= <span class="number">0</span> &amp;&amp; (top = <span class="number">0</span>);</span><br><span class="line">        left &lt;= <span class="number">0</span> &amp;&amp; (left = <span class="number">0</span>);</span><br><span class="line">        left &gt;= right &amp;&amp; (left = right);</span><br><span class="line">        top &gt;= bottom &amp;&amp; (top = bottom);</span><br><span class="line">        <span class="comment">// 移动当前元素</span></span><br><span class="line">        draggableElement.style.left = left + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        draggableElement.style.top = top + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">// 这两句如果拖动元素没有设置bottom和right可以去掉</span></span><br><span class="line">        draggableElement.style.bottom = <span class="string">&#x27;unset&#x27;</span>;</span><br><span class="line">        draggableElement.style.right = <span class="string">&#x27;unset&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.onmouseup = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手动排队等待请求，一次仅允许发送n个请求"><a href="#手动排队等待请求，一次仅允许发送n个请求" class="headerlink" title="手动排队等待请求，一次仅允许发送n个请求"></a>手动排队等待请求，一次仅允许发送n个请求</h2><p>如果真的请求特别多，建议去使用更好的（官方一些的）方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleRequestQueue(paramsArr, maxLength, callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> paramsLength = paramsArr.length;</span><br><span class="line">    <span class="keyword">const</span> requestsQueue = [];</span><br><span class="line">    <span class="keyword">const</span> results = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> req = api.getSomething(param).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> len = results.push(res);</span><br><span class="line">            <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; callback(res);</span><br><span class="line">            <span class="keyword">if</span> (len &lt; paramsLength &amp;&amp; i + <span class="number">1</span> &lt; paramsLength) &#123;</span><br><span class="line">                requestsQueue.shift();</span><br><span class="line">                handleRequest(paramsArr[++i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 所有请求发送完毕</span></span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            results.push(e);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (requestsQueue.push(req) &lt; maxLength) &#123;</span><br><span class="line">            handleRequest(paramsArr[++i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    handleRequest(paramsArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>整理一些vue写法</title>
    <url>/several-vue-grammar/</url>
    <content><![CDATA[<h1 id="整理一些vue写法"><a href="#整理一些vue写法" class="headerlink" title="整理一些vue写法"></a>整理一些vue写法</h1><h2 id="溢出自动显示tooltip的组件"><a href="#溢出自动显示tooltip的组件" class="headerlink" title="溢出自动显示tooltip的组件"></a>溢出自动显示tooltip的组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tooltip</span><br><span class="line">          :disabled&#x3D;&quot;disabled&quot;</span><br><span class="line">          effect&#x3D;&quot;dark&quot;</span><br><span class="line">          :content&#x3D;&quot;tooltipContent || content&quot;</span><br><span class="line">          placement&#x3D;&quot;top&quot;</span><br><span class="line">          :enterable&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;div ref&#x3D;&quot;overflowTooltipContent&quot;</span><br><span class="line">         :class&#x3D;&quot;className&quot; class&#x3D;&quot;overflow-content&quot; @mouseover&#x3D;&quot;isOverflow&quot;&gt;</span><br><span class="line">      &#123;&#123; content &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;el-tooltip&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> name: &#39;overflow-tooltip&#39;,</span><br><span class="line"> props: &#123;</span><br><span class="line">  className: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  tooltipContent: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#39;&#39;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">   disabled: true</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">  isOverflow() &#123;</span><br><span class="line">   if (this.$refs.overflowTooltipContent) &#123;</span><br><span class="line">    this.disabled &#x3D; this.$refs.overflowTooltipContent.offsetWidth &gt;&#x3D; this.$refs.overflowTooltipContent.scrollWidth;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.overflow-content &#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ElementUI timePicker 增加此刻按钮 引发的dom操作的学习</title>
    <url>/element-ui-time-picker-add-now-button/</url>
    <content><![CDATA[<h1 id="ElementUI-timePicker-增加此刻按钮-引发的dom操作的学习"><a href="#ElementUI-timePicker-增加此刻按钮-引发的dom操作的学习" class="headerlink" title="ElementUI timePicker 增加此刻按钮 引发的dom操作的学习"></a>ElementUI timePicker 增加此刻按钮 引发的dom操作的学习</h1><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>获取timePicker弹出框的footer元素</p>
<p>替换原来的取消按钮</p>
<p>&lt;template&gt;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-time-picker</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click.native</span>=<span class="string">&quot;handleClickTime&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:picker-options</span>=<span class="string">&quot;&#123;selectableRange: &#x27;18:00:00 - 20:00:00&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;请选择时间&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-time-picker</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&lt;script&gt;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleClickTime() &#123;</span><br><span class="line">  <span class="keyword">let</span> footer = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.el-time-panel__footer&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">  element.type = <span class="string">&#x27;button&#x27;</span>;</span><br><span class="line">  element.value = <span class="string">&#x27;此刻&#x27;</span>;</span><br><span class="line">  element.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;点击此刻按钮&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  footer.appendChild(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引发的思考"><a href="#引发的思考" class="headerlink" title="引发的思考"></a>引发的思考</h2><p>一开始看到 element UI 不支持 slot ，就开始束手无措，甚至想驳回请求，后来请教了一下组长，直接用 dom 操作加上了 button</p>
<p>所以还是要加强对 JavaScript 的学习</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>一言</title>
    <url>/one-sentence/</url>
    <content><![CDATA[<h1 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h1><blockquote>
<p>我所有的自負皆來自我的自卑，所有的英雄氣概都來自於我的軟弱。嘴裡振振有詞是因為心裡滿是懷疑，深情是因為痛恨自己無情。這世界沒有一件事情是虛空而生的，站在光里，背後就會有陰影，這深夜裡一片寂靜，是因為你還沒有聽見聲音。 ——馬良《坦白书》</p>
</blockquote>
<blockquote>
<p>我所有的自负都来自我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是怀疑。我假装无情，其实是痛恨自己的深情。我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。—— 马良《坦白书》</p>
</blockquote>
<blockquote>
<p>佛说：坐亦禅，行亦禅，一花一世界，一叶一如来，春来花自青，秋至叶飘零，无穷般若心自在，语默动静体自然。</p>
</blockquote>
<blockquote>
<p>我们并不内向，只是不擅长对不亲密的人开朗</p>
</blockquote>
<blockquote>
<p>很多年以后，孩子会记住这个时代。在没什么时代的天空这么美了，紫色的流星落下来，紫色的大丽花盛开、破碎，它的花瓣像是紫色的水向着四面八方奔流，熄灭的时候像是烛火在强风来的一瞬间，如果那个时候人类还存在的话。</p>
</blockquote>
<blockquote>
<p>最后留在记忆深处的总是些虚无缥缈的东西，就像你记住一个人往往不是她的美，很多年后你连她的样子都忘记了，可偶然在人流如织的街头问道她惯用的香水味，你在惊悚中下意识地回过头去，却只看见万千过客的背影。你这才想起即便刚才和你擦肩而过的确是她，即便你跟她面面相对，你也未必能认出她今天的样子了。</p>
</blockquote>
<blockquote>
<p>自身不先改变的话，一切都不会改变。</p>
</blockquote>
<blockquote>
<p>佛说：握紧拳头，你的手里是空的；伸开手掌，你拥有全世界。</p>
</blockquote>
<blockquote>
<p>挡在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们我们无能为力……</p>
</blockquote>
<blockquote>
<p>好看的皮囊千篇一律，有趣的灵魂万里挑一。</p>
</blockquote>
<blockquote>
<p>看，那天空的尽头，闪烁着我们的梦想。读，那里是的深处，埋葬着他们的无奈。走，这脚下的路，孤独而没有尽头。尝，这世间的苦，无奈却依然幸福。</p>
</blockquote>
<blockquote>
<p>胆小鬼连幸福都会害怕，碰到棉花都会受伤，有时候还被幸福所伤。——太宰治《人间失格》</p>
</blockquote>
<blockquote>
<p>愿中国青年都摆脱冷气，只是向上走， 不必听自暴自弃者流的话。 能做事的做事，能发声的发声。 有一分热，发一分光。 就令萤火一般，也可以在黑暗里发一点光， 不必等候炬火。 此后如竟没有炬火，我便是唯一的光。 ——鲁迅</p>
</blockquote>
<blockquote>
<p>躯体有尽时，灵魂无绝期 ——《当呼吸化为空气》</p>
</blockquote>
<blockquote>
<p>别因为你要死了才去做或者不去做某件事情，而是要找到自己认为重要的事情，不管什么时候，只要去做。<br>    Then fancies fly away（一切虚妄过眼）<br>    He’ll fear not what men say（他不会在意他人所言）<br>    He’ll labour night and day（他会昼夜不停劳作）<br>    To be a pilgrim（成为朝圣者不断向前）<br>    ——《当呼吸化为空气》</p>
</blockquote>
<blockquote>
<p>生和死，苦难和苍老，都蕴涵在每一个人的体内，总有一天我们会与之遭逢。我们终将浑然难分，像水溶于水中。——《看见》</p>
</blockquote>
<blockquote>
<p>海子有句诗，深得我心：“天空一无所有，为何给我安慰。”——《看见》</p>
</blockquote>
<blockquote>
<p>在清水里呛呛，血水里泡泡，咸水里滚滚 ——《看见》</p>
</blockquote>
<blockquote>
<p>一个梦就是一部著作,而许多著作只是梦</p>
</blockquote>
<blockquote>
<p>昔日玫瑰以其名留芳，今人所持唯玫瑰之名</p>
</blockquote>
<blockquote>
<p>白鹤林的《孤独》里写，“从童年起，我便独自一人，照顾着历代的星辰。”<br>但遇见你以后，念念落地生根，未来欢愉在等。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-cn-115-不同的子序列</title>
    <url>/leetcode-cn-115/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode-cn.com/problems/distinct-subsequences/">题目</a></h1><p>给定一个字符串 <code>s</code> 和一个字符串 <code>t</code> ，计算在 <code>s</code> 的子序列中 <code>t</code> 出现的个数。</p>
<h2 id="递归遍历（超时）"><a href="#递归遍历（超时）" class="headerlink" title="递归遍历（超时）"></a>递归遍历（超时）</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>遍历s，如果首字母相等，去掉s、t的首字母，继续求解</p>
<p>终止条件是t的首字母都被去掉了，也就是匹配成功，count++</p>
<p>应该可以加入记忆优化，但是我有点想不明白了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numDistinct = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.length === <span class="number">0</span>) &#123;</span><br><span class="line">            cnt ++</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] === t[<span class="number">0</span>]) &#123;</span><br><span class="line">                dfs(s.slice(i + <span class="number">1</span>), t.slice(<span class="number">1</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(s,t)</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先初始化表格，每一个格子代表的意 <code>s[i]</code> 的子序列中 <code>t[j]</code> 出现的个数<code>dp[i][j]</code>。</p>
<p>（自己填一下就会有感觉了）</p>
<table>
<thead>
<tr>
<th>t[j]\s[i]</th>
<th>‘’</th>
<th>b</th>
<th>a</th>
<th>b</th>
<th>g</th>
<th>b</th>
<th>a</th>
<th>g</th>
</tr>
</thead>
<tbody><tr>
<td>‘’</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>b</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>g</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>我们从<code>i=1</code> <code>j=1</code>开始计算，发现</p>
<p>如果<code>t[j] == s[i]</code>则<code>dp[j][i] = dp[j][i - 1] + dp[j - 1][i - 1]</code>，也就是说，多出来的这个字母和子串的最后一个字母相同，那我们就用都去掉这个字母的结果加上只去掉这个字母能匹配的数量，就是总的数量了</p>
<p>如果<code>t[j] != s[i]</code>则 <code>dp[j][i] = dp[j][i - 1]</code>，也就是说s再多一个字符，也应该和没有这个字符所匹配的子串数目是相等的</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numDistinct = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(t.length + <span class="number">1</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(s.length + <span class="number">1</span>).fill(<span class="number">0</span>))</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length + <span class="number">1</span>).fill(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= t.length; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= s.length; ++ i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[j - <span class="number">1</span>] === s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[j][i] = dp[j][i - <span class="number">1</span>] + dp[j - <span class="number">1</span>][i - <span class="number">1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[j][i] = dp[j][i - <span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[t.length][s.length]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
