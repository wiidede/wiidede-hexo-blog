<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于RSS的一些想法</title>
    <url>/wiidede-hexo-blog/thinking-about-rss/</url>
    <content><![CDATA[<h1 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h1><p>个人理解：一个网站发布内容，用户自行选择内容接受</p>
<h1 id="网站生成RSS"><a href="#网站生成RSS" class="headerlink" title="网站生成RSS"></a>网站生成RSS</h1><p>hexo插件生成 <a href="/atom.xml">本网站RSS</a></p>
<h1 id="APP的选择"><a href="#APP的选择" class="headerlink" title="APP的选择"></a>APP的选择</h1><p>暂无</p>
<h1 id="源管理-推荐"><a href="#源管理-推荐" class="headerlink" title="源管理/推荐"></a>源管理/推荐</h1><p>害，现在能有啥简单的阅读呢</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/wiidede-hexo-blog/about-me/</url>
    <content><![CDATA[<h1 id="关于我（wiidede）"><a href="#关于我（wiidede）" class="headerlink" title="关于我（wiidede）"></a>关于我（wiidede）</h1><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>出生：1999年</p>
<p>专业：物联网工程</p>
<p>酷安ID：DD王</p>
<p>github: <a href="http://github.com/wiidede">wiidede</a></p>
<h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><p>大学：家庭服务机器人项目（ROS、深度学习）</p>
<p>某监控公司：实习中，前端</p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>wiidede</tag>
      </tags>
  </entry>
  <entry>
    <title>网站ToDo</title>
    <url>/wiidede-hexo-blog/blog-todo-list/</url>
    <content><![CDATA[<h1 id="网站ToDo"><a href="#网站ToDo" class="headerlink" title="网站ToDo"></a>网站ToDo</h1><ul>
<li><input checked="" disabled="" type="checkbox"> hexo-SEO优化，参考Ayer主题作者的<a href="https://shen-yu.gitee.io/2020/hexo-seo/">文章</a></li>
<li><input disabled="" type="checkbox"> 评论邮箱提醒，使用第三方插件</li>
<li><input checked="" disabled="" type="checkbox"> 关于的页面，以及侧边栏导航</li>
<li><input checked="" disabled="" type="checkbox"> 打赏仅在指定文章出现</li>
</ul>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>ToDo</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式 向前最短匹配</title>
    <url>/wiidede-hexo-blog/reg-about-match-the-forward/</url>
    <content><![CDATA[<h1 id="正则表达式-向前最短匹配"><a href="#正则表达式-向前最短匹配" class="headerlink" title="正则表达式 向前最短匹配"></a>正则表达式 向前最短匹配</h1><p>使用正则表达式  <code>.*?</code>  可以向后匹配最短的，那么如何向前匹配最短的呢</p>
<p>向前的不再能使用 <code>.*?</code> ，因为它会从第一个字母向后找，直到有匹配的，也就相当于找了一个最长的匹配</p>
<p>所以这时候应该换一种思路</p>
<p>使用 <code>a[^a]+</code> 来匹配，也就是说要匹配的字符串前面不能有a，那就是最短的匹配</p>
<p>我们来看一个 Python 写的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reg = <span class="string">r&#x27;```[^```]+&#x27;</span> + clipContent + <span class="string">r&#x27;.*?```&#x27;</span></span><br></pre></td></tr></table></figure>

<p>我们要从 <code>clipContent</code> 向前找到第一次出现 ```` ` ，所以思路应该是向前找到第一个你所想要的内容</p>
<p><a href="/listen-the-clipboard-and-match">这里</a>有一个实际案例</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>监听剪贴板 在文字中匹配相应的内容 适用于题库</title>
    <url>/wiidede-hexo-blog/listen-the-clipboard-and-match/</url>
    <content><![CDATA[<h1 id="监听剪贴板-在文字中匹配相应的内容-适用于题库"><a href="#监听剪贴板-在文字中匹配相应的内容-适用于题库" class="headerlink" title="监听剪贴板 在文字中匹配相应的内容 适用于题库"></a>监听剪贴板 在文字中匹配相应的内容 适用于题库</h1><p>最近有考试，还有题库，我就把之前写的监听剪贴板来搜索题库的程序拿了出来。虽然可能你更希望直接帮你答好，但有些网站只有一次考试机会，所以监听剪贴板反而更通用，虽然你 <code>ctrl + c</code> 可能会按的有点累，但总比一题一题搜（<code>ctrl + c</code> <code>切换到题库</code> <code>ctrl + f</code>   <code>ctrl + v</code>）快一点</p>
<p>当然如果你有更好的方法也可以留言或者告诉我</p>
<p>注意，如果网页不让你复制，不让你选择文字，请先安装油猴插件，再安装<a href="https://greasyfork.org/zh-CN/scripts/28497-remove-web-limits-modified">文字限制解除</a></p>
<p>话不多说，很简单的代码直接上了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    lastClipContent = <span class="literal">None</span></span><br><span class="line">    txt = open(<span class="string">&quot;xxxxxxxxxxxxx题库.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        clipContent = pyperclip.paste()</span><br><span class="line">        <span class="keyword">if</span> clipContent != lastClipContent:</span><br><span class="line">            lastClipContent = clipContent</span><br><span class="line">            reg = <span class="string">r&#x27;```[^```]+&#x27;</span> + clipContent + <span class="string">r&#x27;.*?```&#x27;</span></span><br><span class="line">            regPattern = re.compile(reg, re.S | re.M)</span><br><span class="line">            result = regPattern.findall(txt)</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                print(<span class="string">&#x27;\n\n------------------------&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">                    print(item.replace(<span class="string">&#x27;```&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">                print(<span class="string">&#x27;------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>其中关于正则表示的原理可以参考<a href="/reg-about-match-the-forward">这里</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
        <tag>Python</tag>
        <tag>监听剪贴板</tag>
      </tags>
  </entry>
  <entry>
    <title>魅蓝 note6 使用体验</title>
    <url>/wiidede-hexo-blog/meizu-note6-exprience/</url>
    <content><![CDATA[<h2 id="魅蓝-note6-使用报告"><a href="#魅蓝-note6-使用报告" class="headerlink" title="魅蓝 note6 使用报告"></a>魅蓝 note6 使用报告</h2><p>开始用 note6 已有一个礼拜来总结一下吧</p>
<h3 id="外观-amp-手感"><a href="#外观-amp-手感" class="headerlink" title="外观&amp;手感"></a>外观&amp;手感</h3><p>正面 2.5D 玻璃，加上白色，温润如玉。额头上，传感器，扬声器排列整齐。<br>背面经典双天线，大小双摄，也算是用心的。<br>虽然有点厚，有点重，手感是很棒的。<br>还有屏幕真的不是特别耐刮，我裸奔。<br>最高亮度 400 多尼特，反正比我 A0001 高</p>
<h3 id="性能-amp-功耗"><a href="#性能-amp-功耗" class="headerlink" title="性能&amp;功耗"></a>性能&amp;功耗</h3><p>选择 note6 也是因为雷军吹 625 一代神U，不过确实，性能完全够用，续航更是比我之前的 A0001 好太多，中度使用一天还会剩很多电，18W 的快充也很令人满意，顺带说一句，魅族竟然配了24W的充电器，因为良心？？？</p>
<h3 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h3><p>虽然和三星 S7 用了相同规格的 COMS ，但光圈小了，没 OIS 光学防抖，算法即使有了 ArcSoft 的优化，还是和 S7 又不小差距，但比起 A0001 又是好太多。对焦真的很快。整体完全可以拉开与其他千元机的差距</p>
<h3 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h3><p>前置，蛮快的，识别率也很高。不想买更贵的是我真的受不了后置指纹。</p>
<h3 id="Flyme"><a href="#Flyme" class="headerlink" title="Flyme"></a>Flyme</h3><p>以前 Flyme 叫 Bugme，在修改了 dpi 的情况下，还真有BUG。对于大众用户是不错的。但没了自己的特色，也没有对发烧玩家的更好的支持，毕竟这是一款青年良品。<br>Flyme里的钱包就是坑好吧，竟然不是魅族自家的，我已经买了遂平保了，但我担心后期修复服务不是会特别好。<br>由于 @森雨Plus 把清雨图标包放到了魅族主题上，所以桌面还是很不错的。<br>安装应用时必须扫描，很气，安装应用时间贼长。<br>Go Host 为什么修改不了 Host，很气。<br>多任务键的缺失导致必须用手势，从而来带各种误操作，在战就战里驻守一直会切到多任务栏，很气，优势驻守晚了直接一波GG。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>phone</tag>
      </tags>
  </entry>
  <entry>
    <title>写给学姐瞎讲的机器人比赛相关</title>
    <url>/wiidede-hexo-blog/warehousing-robot/</url>
    <content><![CDATA[<h1 id="仓储机器人"><a href="#仓储机器人" class="headerlink" title="仓储机器人"></a>仓储机器人</h1><h2 id="调试阶段"><a href="#调试阶段" class="headerlink" title="调试阶段"></a>调试阶段</h2><h3 id="1-建图"><a href="#1-建图" class="headerlink" title="1.建图"></a>1.建图</h3><p>slam建图（见开发手册9）</p>
<h3 id="2-添加航点"><a href="#2-添加航点" class="headerlink" title="2.添加航点"></a>2.添加航点</h3><p>有了航点就相当于告诉机器人下一个目标，它就会用amcl(蒙特卡洛自适应定位算法)自动导航到目标航点（见开发手册 10）</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>我们修改了路径规划的代码，本来路径规划是给出航点的名字或者序号，让机器人走到航点处，再走到下一个节点。我们让它走到航点处停下来进行拍照识别。</p>
<p>比赛的要求是 机器人进入入口，走到裁判给出的三个航点，以及随机的障碍物，分别避过障碍物，到达航点，对桌子上的物品进行识别，框出带有五角星的饮料，桌子上摆着六瓶饮料。然后走出出口。</p>
<h2 id="识别五角星过程"><a href="#识别五角星过程" class="headerlink" title="识别五角星过程"></a>识别五角星过程</h2><p>最主要的代码：OpenCV的模板匹配</p>
<blockquote>
<p>OpenCV的目标匹配函数为matchTemplate，函数原型为：</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">matchTemplate(image, templ, method[, result[, mask]]) -&gt; result</span><br></pre></td></tr></table></figure>

<blockquote>
<p>image参数表示待搜索源图像，必须是8位整数或32位浮点。<br>templ参数表示模板图像，必须不大于源图像并具有相同的数据类型。<br>method参数表示计算匹配程度的方法。<br>result参数表示匹配结果图像，必须是单通道32位浮点。如果image的尺寸为W x H，templ的尺寸为w x h，则result的尺寸为(W-w+1)x(H-h+1)。</p>
</blockquote>
<p>其实就是给出模板，选择匹配算法，这函数就返回与模板最匹配的区域。</p>
<p>模板匹配最重要的就是模板和匹配的算法，模板（也就是五角星）我们在比赛调试阶段就拍好了，匹配算法我们从给出的算法中选择识别率最高的</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次比赛是比较简单的一次比赛，要自己写的代码只有识别五角星然后框图，模板匹配网上也都有比较详细的教程，当然，识别五角星还比较简单的，更难的比如人脸识别，网上也有代码，这个机器人的官方也给出了人脸识别的代码</p>
<blockquote>
<p><a href="https://github.com/6-robot/wpb_home">https://github.com/6-robot/wpb_home</a></p>
</blockquote>
<p>这个网站（我发给过学姐），就是一些官方出的基本案例，源代码都在上面。</p>
<p>还有ROS这系统，还是比较复杂的，一时半会也学不来，我觉得我们实验室的人基本对它的了解还是很少的。</p>
<p>还有最重要的就是开发手册和github上那些案例了，关于机器人的技术，除了ROS大部分都在上面了。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>robot</tag>
      </tags>
  </entry>
  <entry>
    <title>大三实训 MP3 播放器 硬件</title>
    <url>/wiidede-hexo-blog/mp3-player-note/</url>
    <content><![CDATA[<h1 id="大三实训-MP3-播放器-硬件"><a href="#大三实训-MP3-播放器-硬件" class="headerlink" title="大三实训 MP3 播放器 硬件"></a>大三实训 MP3 播放器 硬件</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol>
<li><p>驼峰命名法</p>
<ul>
<li><p>一组单词表示函数、变量的实际作用</p>
</li>
<li><p>每个单词首字母大写</p>
</li>
<li><p>变量、函数：首字母小写</p>
</li>
<li><p>结构体、枚举：首字母大写</p>
</li>
</ul>
</li>
<li><p>匈牙利命名法</p>
<ul>
<li>显示框 – iSum</li>
<li>求和按钮 – btnSum</li>
<li>int – i</li>
<li>bool – b</li>
<li>string – s</li>
<li>* - - p </li>
<li>const – c_</li>
</ul>
</li>
</ol>
<h2 id="基于AVR的音乐播放器的设计与实现"><a href="#基于AVR的音乐播放器的设计与实现" class="headerlink" title="基于AVR的音乐播放器的设计与实现"></a>基于AVR的音乐播放器的设计与实现</h2><ol>
<li>团队协作 Team Building</li>
<li>项目开发流程</li>
<li>熟悉C、C语言单片机开发技术</li>
</ol>
<h3 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h3><ol>
<li>组长、经理<ul>
<li>项目经理</li>
<li>项目组长</li>
</ul>
</li>
<li>组员<ul>
<li>产品</li>
<li>硬件开发<ul>
<li>主板 - 电路设计人员 - PCB<ul>
<li>硬盘<ul>
<li>SSD<ul>
<li>英特尔</li>
<li>三星</li>
<li>……</li>
</ul>
</li>
<li>HHD</li>
</ul>
</li>
</ul>
</li>
<li>驱动开发人员 - BIOS</li>
</ul>
</li>
<li>软件开发</li>
<li>设计人员<ul>
<li>设计产品的功能</li>
<li>设计产品的界面</li>
<li>完成文档</li>
<li>产品发布</li>
</ul>
</li>
<li></li>
<li></li>
<li>8 ~ 9 人一组 10:15</li>
<li>9 - 12  2 - 5:30 3:30</li>
<li>6:30 - 8:30</li>
<li></li>
<li></li>
<li>3周</li>
<li>C语言基础、单片机基础驱动、</li>
<li>项目搭建与实现：音频播放芯片、显示屏</li>
<li>项目逻辑实现：控制、播放</li>
</ul>
</li>
<li>音乐播放器<ul>
<li>评审、调研项目 - 项目确认<ul>
<li>公司负责人</li>
<li>财务工作人员</li>
<li>技术总监</li>
<li></li>
<li>技术</li>
<li>成本</li>
<li>效益</li>
</ul>
</li>
<li>开发团队<ul>
<li>领导 - 经理、组长</li>
<li>产品</li>
<li>设计</li>
</ul>
</li>
<li>需求确认<ul>
<li>需求分析报告<ul>
<li>功能</li>
</ul>
</li>
<li>功能确认表/工作量</li>
<li>原型设计</li>
</ul>
</li>
<li>设计<ul>
<li>数据设计</li>
<li>用例</li>
</ul>
</li>
<li>编码<ul>
<li>注释<ul>
<li>接口的说明</li>
<li>参数，逐条说明：类型，作用，内存使用</li>
<li>返回值，类型，作用，内存使用</li>
</ul>
</li>
<li>接口<ul>
<li>规范</li>
</ul>
</li>
</ul>
</li>
<li>测试<ul>
<li>白盒测试<ul>
<li>常规数据测试</li>
<li>边界数据 / 极限数据</li>
</ul>
</li>
<li>黑盒测试<ul>
<li>隐藏内部实现</li>
<li>功能测试</li>
</ul>
</li>
<li>扩大测试范围</li>
</ul>
</li>
<li>交付</li>
<li>运维</li>
</ul>
</li>
</ol>
<h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><ol>
<li><p>控制</p>
<ul>
<li><p>控制方式</p>
<ul>
<li>按键 - 6</li>
<li>红外遥控</li>
<li>串口</li>
</ul>
</li>
<li><p>播放/暂停</p>
<ul>
<li>播放</li>
<li>停止</li>
<li>暂停</li>
</ul>
</li>
<li><p>歌曲切换</p>
<ul>
<li>上一首</li>
<li>下一首</li>
<li>模式切换<ul>
<li>单曲循环</li>
<li>随机循环</li>
<li>顺序循环</li>
</ul>
</li>
</ul>
</li>
<li><p>音量调节</p>
<ul>
<li>音量增加</li>
<li>音量减少</li>
<li>静音</li>
</ul>
</li>
<li><p>歌曲列表跳转</p>
</li>
<li><p>播放进度跳转</p>
<ul>
<li>快进</li>
<li>快退</li>
</ul>
</li>
<li><p>收藏歌曲</p>
</li>
<li><p>屏幕背光开关</p>
</li>
</ul>
</li>
<li><p>显示</p>
<ul>
<li>开机动画</li>
<li>播放列表<ul>
<li>歌曲名称</li>
<li>歌手</li>
<li>时长</li>
<li>状态</li>
</ul>
</li>
<li>当前正在播放的歌曲<ul>
<li>名称</li>
<li>进度条</li>
<li>时间</li>
</ul>
</li>
<li>歌词显示</li>
<li>运行状态</li>
</ul>
</li>
</ol>
<h3 id="UVRT"><a href="#UVRT" class="headerlink" title="UVRT"></a>UVRT</h3><h3 id="GPIO-输入输出I-O"><a href="#GPIO-输入输出I-O" class="headerlink" title="GPIO 输入输出I/O"></a>GPIO 输入输出I/O</h3><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul>
<li><p>UASRT GSM WiFi 蓝牙 GPRS 窄带物联网</p>
</li>
<li><p>LCD GPIO（8位并行）</p>
</li>
<li><p>VS1003 SPI GPIO</p>
</li>
<li><p>红外</p>
</li>
</ul>
<h3 id="DDRxn寄存器"><a href="#DDRxn寄存器" class="headerlink" title="DDRxn寄存器"></a>DDRxn寄存器</h3><ul>
<li>1 = 输出</li>
<li>0 = 输入</li>
</ul>
<h3 id="PORTxn寄存器"><a href="#PORTxn寄存器" class="headerlink" title="PORTxn寄存器"></a>PORTxn寄存器</h3><ul>
<li>1 = 引脚输出高电平 上拉电阻使能</li>
<li>0 = 引脚输出低电平 上拉电阻去使能</li>
</ul>
<h3 id="PINxn"><a href="#PINxn" class="headerlink" title="PINxn"></a>PINxn</h3><ul>
<li>读取引脚电平变化（输入状态）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pc3输出高电平</span></span><br><span class="line">DDRC |= <span class="number">0x08</span>;</span><br><span class="line">PORTC |= <span class="number">0x08</span>;</span><br><span class="line"><span class="comment">//pc4输出低电平</span></span><br><span class="line">PORTC &amp;= <span class="number">0xEF</span>;</span><br><span class="line"><span class="comment">//pc0134输出高电平</span></span><br><span class="line">DDRC |= (<span class="number">1</span> &lt;&lt; <span class="number">0</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">1</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">3</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">4</span>);</span><br><span class="line"><span class="comment">//pc2567输出低电平</span></span><br><span class="line">DDRC &amp;= ~((<span class="number">1</span> &lt;&lt; <span class="number">2</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">6</span>) | (<span class="number">1</span> &lt;&lt; <span class="number">7</span>));</span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ol>
<li><p>GPIO-LED : led.h/led.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Led初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledInit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//Led亮</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledOpen</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//Led灭</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledClose</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TOOL-DELAY : delay.h/delay.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按毫秒延时</span></span><br><span class="line"><span class="comment">//@param u16 time 要延时的毫秒数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 time)</span></span>;</span><br><span class="line"><span class="comment">//按微秒延时</span></span><br><span class="line"><span class="comment">//@param u16 time 要延时的微秒数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u16 time)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TOOL-SYSTEM : system.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//char ---&gt; s8</span></span><br><span class="line"><span class="comment">//short ---&gt; s16</span></span><br><span class="line"><span class="comment">//long ---&gt; s32</span></span><br><span class="line"><span class="comment">//unsigned char ---&gt; u8</span></span><br><span class="line"><span class="comment">//unsigned short ---&gt; u16</span></span><br><span class="line"><span class="comment">//unsigned long ---&gt; u32</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>GPIO-KEY : key.h/key.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按键初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyInit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取当前按键状态</span></span><br><span class="line"><span class="comment">//@return u8 S1~S6 对应0~5位</span></span><br><span class="line"><span class="comment">//             按下为1，抬起为0</span></span><br><span class="line"><span class="function">u8 <span class="title">getKeyValue</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>USART : usart.h/usart.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串口初始化</span></span><br><span class="line"><span class="comment">//波特率、帧结构、功能开关</span></span><br><span class="line"><span class="comment">//@param ubrr 决定串口的波特率</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usartInit</span><span class="params">(u16 ubrr)</span></span>;</span><br><span class="line"><span class="comment">//数据发送</span></span><br><span class="line"><span class="comment">//@param data 要发送的数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usartTransmit</span><span class="params">(u8 data)</span></span>;</span><br><span class="line"><span class="comment">//通过串口发送字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usartTransmitString</span><span class="params">(s8 * str)</span></span>;</span><br><span class="line"><span class="comment">//通过串口发送数字</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usartTransmitNumber</span><span class="params">(s32 num)</span></span>;</span><br><span class="line"><span class="comment">//接受中断服务函数</span></span><br><span class="line"><span class="comment">//ISR(USART_RXC_vect);</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="USART"><a href="#USART" class="headerlink" title="USART"></a>USART</h2><p>UCSRA = 0</p>
<p>UCSRB = 1 &lt;&lt; RXCIE | 1 &lt;&lt; RXEN | 1 &lt;&lt; TXEN</p>
<p>UCSRC = 1 &lt;&lt; URSEL | 1 &lt;&lt; UCSZ1 | 1&lt;&lt; UCSZ0</p>
<p>UBRRH/UBRRL</p>
<p>u16 ubrr = 383</p>
<p>UBRRL = ubrr</p>
<p>UBRRH = ubrr &gt;&gt; 8</p>
<p>串口配置</p>
<ul>
<li>波特率</li>
<li>帧结构<ul>
<li>数据位 - 8</li>
<li>停止位 - 1</li>
<li>校验位 - 0</li>
</ul>
</li>
<li>功能使能</li>
</ul>
<p>发送、接受</p>
<h2 id="LCD12864"><a href="#LCD12864" class="headerlink" title="LCD12864"></a>LCD12864</h2><ul>
<li>128 x 64 像素</li>
<li>8 x 4 汉字</li>
<li>并行通信</li>
<li>通信内容<ul>
<li>在第一行显示“你好”</li>
<li>RS : <ul>
<li>指令：L<ul>
<li>坐标设置</li>
</ul>
</li>
<li>数据：H<ul>
<li>你好</li>
</ul>
</li>
</ul>
</li>
<li>RW : <ul>
<li>写入：L</li>
<li>读取：H</li>
</ul>
</li>
<li>EN : <ul>
<li>操作屏幕，使能</li>
</ul>
</li>
</ul>
</li>
<li>初始化<ul>
<li>设置基本指令集</li>
<li>清空</li>
<li>显示打开</li>
<li>地址归位</li>
</ul>
</li>
<li>写指令<ul>
<li>等待LCD空闲</li>
<li>RS_L</li>
<li>RW_L</li>
<li>EN_H</li>
<li>延时</li>
<li>指令写入</li>
<li>EN_L</li>
</ul>
</li>
<li>等待LCD空闲：<ul>
<li>RS_L</li>
<li>RW_H</li>
<li>EN_H</li>
<li>延时</li>
<li>读取BF状态</li>
<li>EN_L</li>
</ul>
</li>
</ul>
<p>###7/9任务</p>
<ol>
<li><p>显示图片</p>
</li>
<li><p>LCD：void lcdDispProgrees(u8 pos);//进度条</p>
</li>
<li><p>界面设计</p>
<ol>
<li><p>每个界面完成一个单独的接口</p>
<p>*name1 *name2 *name3 pos</p>
</li>
<li><p>完成静态</p>
</li>
<li><p>文档说明每个界面具体可以显示的内容</p>
</li>
</ol>
</li>
<li><p>LCD模块 详细设计说明书</p>
</li>
</ol>
<h2 id="mp3步骤"><a href="#mp3步骤" class="headerlink" title="mp3步骤"></a>mp3步骤</h2><ol>
<li>初始化驱动</li>
<li>加载播放列表</li>
<li>功能选择<ol>
<li>控制</li>
</ol>
</li>
</ol>
<h3 id="6天"><a href="#6天" class="headerlink" title="6天"></a>6天</h3><ol>
<li>列表存储与加载</li>
<li>播放控制</li>
<li>进度条显示</li>
<li>串口同步</li>
<li>上下位机歌词显示</li>
</ol>
<h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><ul>
<li>初始化<ul>
<li>硬件初始化</li>
<li>显示开机界面</li>
<li>挂载文件系统</li>
<li>加载播放列表<ul>
<li>歌曲名字</li>
<li>歌曲总数</li>
</ul>
</li>
</ul>
</li>
<li>运行<ul>
<li>功能选择<ul>
<li>播放</li>
<li>浏览列表</li>
</ul>
</li>
<li>播放<ul>
<li>确定要播放的歌曲序号<ul>
<li>顺序-0</li>
</ul>
</li>
<li>根据序号获取歌曲名称<ul>
<li>打开文件</li>
<li>播放<ul>
<li>按键检测<ul>
<li>判断跳转标记量<ul>
<li>标记量清空</li>
<li>break;</li>
</ul>
</li>
</ul>
</li>
<li>向VS1003发送数据</li>
<li>判断歌曲是否结束</li>
<li>next();</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="控制模块"><a href="#控制模块" class="headerlink" title="控制模块"></a>控制模块</h3><p>Control : control.h/control.c    </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//运行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//初始化播放列表</span></span><br><span class="line"><span class="comment">//确定歌曲总数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePlaylist</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//根据歌曲序号获取歌曲名称</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMusicName</span><span class="params">(u16 musicIndex, u8 *musicName)</span></span>;</span><br><span class="line"><span class="comment">//memcpy();</span></span><br><span class="line"><span class="comment">//下一首</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//上一首</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prev</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//按键检测</span></span><br><span class="line"><span class="comment">//getKeyValue()</span></span><br><span class="line"><span class="comment">//u8 temp = infValue;</span></span><br><span class="line"><span class="comment">//infValue = 0;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyCheck</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>mp3</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云学习笔记</title>
    <url>/wiidede-hexo-blog/aliyun-note/</url>
    <content><![CDATA[<h1 id="阿里云学习笔记-很久之前的尝试"><a href="#阿里云学习笔记-很久之前的尝试" class="headerlink" title="阿里云学习笔记(很久之前的尝试)"></a>阿里云学习笔记(很久之前的尝试)</h1><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>选择套餐（注册免费试用）</p>
<p>ip地址：xx.xx.xx.xx</p>
<p>选择了ubuntu14.04（免费试用没有更高的版本）</p>
<h2 id="创建桌面"><a href="#创建桌面" class="headerlink" title="创建桌面"></a>创建桌面</h2><p>通过VNC连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get install ubuntu-desktop</span><br></pre></td></tr></table></figure>

<p>修改两个配置文件可以使用root登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">Seat:*</span>]</span><br><span class="line"><span class="string">user-session=ubuntu</span></span><br><span class="line"><span class="string">greeter-show-manual-login=true</span></span><br><span class="line"><span class="string">allow-guest=false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /root/.profile</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.profile: executed by Bourne-compatible login shells.</span></span><br><span class="line"><span class="string">if</span> [ <span class="string">&quot;$BASH&quot;</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">  <span class="string">if</span> [ <span class="string">-f</span> <span class="string">~/.bashrc</span> ]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">    <span class="string">.</span> <span class="string">~/.bashrc</span></span><br><span class="line">  <span class="string">fi</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">tty</span> <span class="string">-s</span> <span class="string">&amp;&amp;</span> <span class="string">mesg</span> <span class="string">n</span> <span class="string">||</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="搭建ftp传输文件"><a href="#搭建ftp传输文件" class="headerlink" title="搭建ftp传输文件"></a>搭建ftp传输文件</h2><h3 id="失败（无法匿名登录，本地测试通过，远程无法连接）"><a href="#失败（无法匿名登录，本地测试通过，远程无法连接）" class="headerlink" title="失败（无法匿名登录，本地测试通过，远程无法连接）"></a>失败（无法匿名登录，本地测试通过，远程无法连接）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建匿名上传目录</span></span><br><span class="line">mkdir ~/ftp</span><br><span class="line"><span class="built_in">cd</span> ~/ftp</span><br><span class="line">mkdir anonymous</span><br><span class="line">chomd 777 anonymous</span><br><span class="line"><span class="comment"># 安装vsftpd</span></span><br><span class="line">sudo apt-get install vsftpd</span><br><span class="line">sudo vi /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改vsftpd.conf</span><br><span class="line">anonymous_enable&#x3D;YES</span><br><span class="line">anon_root&#x3D;&#x2F;root&#x2F;ftp</span><br><span class="line">no_anon_password&#x3D;YES</span><br><span class="line">write_enable&#x3D;YES</span><br><span class="line">anon_upload_enable&#x3D;YES</span><br><span class="line">anon_mkdir_write_enable&#x3D;YES</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">ftp 127.0.0.1</span><br><span class="line">anonymous</span><br></pre></td></tr></table></figure>

<p>开放20/21端口（ftp使用的端口）</p>
<h3 id="第二次尝试（创建用户）（sftp）-成功"><a href="#第二次尝试（创建用户）（sftp）-成功" class="headerlink" title="第二次尝试（创建用户）（sftp）(成功)"></a>第二次尝试（创建用户）（sftp）(成功)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install vsftpd</span><br><span class="line">mkdir /home/uftp</span><br><span class="line">useradd -d /home/uftp -s /bin/bash uftp </span><br><span class="line">passwd uftp</span><br><span class="line">chown uftp:uftp /home/uftp</span><br><span class="line">vi /etc/vsftpd.user_allowlist</span><br><span class="line"><span class="comment"># 加入uftp(直接添加4个字)</span></span><br><span class="line">vi /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">write_enable=YES</span></span><br><span class="line"><span class="string">userlist_file=/etc/vsftpd.user_allowlist</span></span><br><span class="line"><span class="string">userlist_enable=YES</span></span><br><span class="line"><span class="string">userlist_deny=NO</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">service vsftpd restart</span><br><span class="line"><span class="comment">#用21端口 uftp 123456 主动 登陆</span></span><br></pre></td></tr></table></figure>

<p>关闭20/21端口 sftp使用22端口，同时22端口通常用于ssh连接</p>
<h2 id="展示markdown文件给别人看（简单的网页）"><a href="#展示markdown文件给别人看（简单的网页）" class="headerlink" title="展示markdown文件给别人看（简单的网页）"></a>展示markdown文件给别人看（简单的网页）</h2><p><a href="https://github.com/wangchaoeric87/markdown">https://github.com/wangchaoeric87/markdown</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Markup</span><br><span class="line"><span class="keyword">import</span> markdown</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/alinote&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">	content = md2html(<span class="string">&#x27;/home/uftp/note/aliCloud-note.md&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,**locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md2html</span>(<span class="params">filename</span>):</span></span><br><span class="line">	</span><br><span class="line">	exts = [<span class="string">&#x27;markdown.extensions.extra&#x27;</span>, <span class="string">&#x27;markdown.extensions.codehilite&#x27;</span>,<span class="string">&#x27;markdown.extensions.tables&#x27;</span>,<span class="string">&#x27;markdown.extensions.toc&#x27;</span>]</span><br><span class="line">	mdcontent = <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">with</span> open(filename,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">		mdcontent = f.read()</span><br><span class="line">		<span class="keyword">pass</span>	</span><br><span class="line">	html = markdown.markdown(mdcontent,extensions=exts)</span><br><span class="line">	content = Markup(html)</span><br><span class="line">	<span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	app.debug = <span class="literal">True</span></span><br><span class="line">	app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port = <span class="number">5000</span>)</span><br></pre></td></tr></table></figure>



<p>把 app.run() 中 host 参数改为0.0.0.0即可给所有人访问</p>
<p>把 app.route() 的改成网页的路径 /alinote</p>
<p>通过外网访问</p>
<p><a href="http://xx.xx.xx.xx:5000/alinote">http://xx.xx.xx.xx:5000/alinote</a></p>
<p>CSS样式</p>
<p><a href="https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css">https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>aliyun</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习笔记</title>
    <url>/wiidede-hexo-blog/deep-learning-note/</url>
    <content><![CDATA[<h1 id="深度学习笔记"><a href="#深度学习笔记" class="headerlink" title="深度学习笔记"></a>深度学习笔记</h1><h2 id="一个最基础的例子"><a href="#一个最基础的例子" class="headerlink" title="一个最基础的例子"></a>一个最基础的例子</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l0 = tf.keras.layers.Dense(units=<span class="number">1</span>, input_shape=[<span class="number">1</span>]) </span><br><span class="line">model = tf.keras.Sequential([l0])</span><br><span class="line">model.compile(loss=<span class="string">&#x27;mean_squared_error&#x27;</span>, optimizer=tf.keras.optimizers.Adam(<span class="number">0.1</span>))</span><br><span class="line">history = model.fit(celsius_q, fahrenheit_a, epochs=<span class="number">500</span>, verbose=<span class="literal">False</span>)</span><br><span class="line">model.predict([<span class="number">100.0</span>])</span><br></pre></td></tr></table></figure>

<h2 id="术语："><a href="#术语：" class="headerlink" title="术语："></a>术语：</h2><ul>
<li><strong>特征：</strong>模型的输入</li>
<li><strong>样本：</strong>用于训练流程的输入/输出对</li>
<li><strong>标签：</strong>模型的输出</li>
<li><strong>层级：</strong>神经网络中相互连接的节点集合。</li>
<li><strong>模型：</strong>神经网络的表示法</li>
<li><strong>密集全连接层 (FC)：</strong>一个层级中的每个节点都与上个层级中的每个节点相连。</li>
<li><strong>权重和偏差：</strong>模型的内部变量</li>
<li><strong>损失：</strong>期望输出和真实输出之间的差值</li>
<li><strong>MSE：</strong>均方误差，一种损失函数，它会将一小部分很大的差值视作比大量很小的差值更糟糕。</li>
<li><strong>梯度下降法：</strong>每次小幅调整内部变量，从而逐渐降低损失函数的算法。</li>
<li><strong>优化器：</strong>梯度下降法的一种具体实现方法。（有很多算法。在这门课程中，我们将仅使用“Adam”优化器，它是 <em>ADAptive with Momentum</em> 的简称，并且被视为最佳优化器。）</li>
<li><strong>学习速率：</strong>梯度下降过程中的损失改进“步长”。</li>
<li><strong>批次：</strong>在训练神经网络的过程中使用的一组样本。</li>
<li><strong>周期：</strong>完全经过整个训练数据集一轮</li>
<li><strong>前向传播：</strong>根据输入计算输出值</li>
<li><strong>反向传播：</strong>根据优化器算法计算内部变量的调整幅度，从输出层级开始，并往回计算每个层级，直到抵达输入层。</li>
<li><strong>扁平化：</strong>将二维图像转换为一维向量的过程</li>
<li><strong>ReLU：</strong>一种激活函数，使模型能够解决非线性问题</li>
<li><strong>Softmax：</strong>一种函数，能够为每个潜在输出类别生成概率</li>
<li><strong>分类：</strong>一种机器学习模型，用于区分两个或多个输出类别</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>deep learing</tag>
      </tags>
  </entry>
  <entry>
    <title>git 本地切换帐号</title>
    <url>/wiidede-hexo-blog/git-change-local-account/</url>
    <content><![CDATA[<h1 id="git-切换本地帐号"><a href="#git-切换本地帐号" class="headerlink" title="git 切换本地帐号"></a>git 切换本地帐号</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name wiidede</span><br><span class="line">git config --<span class="built_in">local</span> user.email wiixdede@gmail.com</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>毕业设计部署踩坑笔记</title>
    <url>/wiidede-hexo-blog/graduation-project-note/</url>
    <content><![CDATA[<h1 id="毕业设计部署踩坑笔记"><a href="#毕业设计部署踩坑笔记" class="headerlink" title="毕业设计部署踩坑笔记"></a>毕业设计部署踩坑笔记</h1><p>首先为什么要叫踩坑，主要还是之前从来没有正式的发布过</p>
<p>其次就是最后想要的效果，就是用docker直接在服务器上发布</p>
<h2 id="1-nginx直接发布编译好的vue项目"><a href="#1-nginx直接发布编译好的vue项目" class="headerlink" title="1.nginx直接发布编译好的vue项目"></a>1.nginx直接发布编译好的vue项目</h2><p>先停掉apache2或其他服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 stop</span><br></pre></td></tr></table></figure>

<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>

<p>nginx 配置 我们使用最简单的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>/etc/nginx/nginx.conf</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#最简单的配置</span><br><span class="line">worker_processes 1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       conf&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;                    #端口</span><br><span class="line">        server_name  localhost;             #主机名</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;                    #项目根目录</span><br><span class="line">            index  index.html index.htm;    #起始页</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>/etc/nginx/conf/mime.types</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">types &#123;</span><br><span class="line">  text&#x2F;html                             html htm shtml;</span><br><span class="line">  text&#x2F;css                              css;</span><br><span class="line">  text&#x2F;xml                              xml rss;</span><br><span class="line">  image&#x2F;gif                             gif;</span><br><span class="line">  image&#x2F;jpeg                            jpeg jpg;</span><br><span class="line">  application&#x2F;x-javascript              js;</span><br><span class="line">  text&#x2F;plain                            txt;</span><br><span class="line">  text&#x2F;x-component                      htc;</span><br><span class="line">  text&#x2F;mathml                           mml;</span><br><span class="line">  image&#x2F;png                             png;</span><br><span class="line">  image&#x2F;x-icon                          ico;</span><br><span class="line">  image&#x2F;x-jng                           jng;</span><br><span class="line">  image&#x2F;vnd.wap.wbmp                    wbmp;</span><br><span class="line">  application&#x2F;java-archive              jar war ear;</span><br><span class="line">  application&#x2F;mac-binhex40              hqx;</span><br><span class="line">  application&#x2F;pdf                       pdf;</span><br><span class="line">  application&#x2F;x-cocoa                   cco;</span><br><span class="line">  application&#x2F;x-java-archive-diff       jardiff;</span><br><span class="line">  application&#x2F;x-java-jnlp-file          jnlp;</span><br><span class="line">  application&#x2F;x-makeself                run;</span><br><span class="line">  application&#x2F;x-perl                    pl pm;</span><br><span class="line">  application&#x2F;x-pilot                   prc pdb;</span><br><span class="line">  application&#x2F;x-rar-compressed          rar;</span><br><span class="line">  application&#x2F;x-redhat-package-manager  rpm;</span><br><span class="line">  application&#x2F;x-sea                     sea;</span><br><span class="line">  application&#x2F;x-shockwave-flash         swf;</span><br><span class="line">  application&#x2F;x-stuffit                 sit;</span><br><span class="line">  application&#x2F;x-tcl                     tcl tk;</span><br><span class="line">  application&#x2F;x-x509-ca-cert            der pem crt;</span><br><span class="line">  application&#x2F;x-xpinstall               xpi;</span><br><span class="line">  application&#x2F;zip                       zip;</span><br><span class="line">  application&#x2F;octet-stream              deb;</span><br><span class="line">  application&#x2F;octet-stream              bin exe dll;</span><br><span class="line">  application&#x2F;octet-stream              dmg;</span><br><span class="line">  application&#x2F;octet-stream              eot;</span><br><span class="line">  application&#x2F;octet-stream              iso img;</span><br><span class="line">  application&#x2F;octet-stream              msi msp msm;</span><br><span class="line">  audio&#x2F;mpeg                            mp3;</span><br><span class="line">  audio&#x2F;x-realaudio                     ra;</span><br><span class="line">  video&#x2F;mpeg                            mpeg mpg;</span><br><span class="line">  video&#x2F;quicktime                       mov;</span><br><span class="line">  video&#x2F;x-flv                           flv;</span><br><span class="line">  video&#x2F;x-msvideo                       avi;</span><br><span class="line">  video&#x2F;x-ms-wmv                        wmv;</span><br><span class="line">  video&#x2F;x-ms-asf                        asx asf;</span><br><span class="line">  video&#x2F;x-mng                           mng;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译vue项目"><a href="#编译vue项目" class="headerlink" title="编译vue项目"></a>编译vue项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn run bulid</span><br></pre></td></tr></table></figure>

<p>修改nginx.conf http server location root 为 项目所在位置 （dist文件夹）</p>
<p>访问localhost，成功</p>
<h2 id="2-发布flask应用"><a href="#2-发布flask应用" class="headerlink" title="2.发布flask应用"></a>2.发布flask应用</h2><p>这里没有其他项目就不用虚拟环境了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install gunicorn</span><br><span class="line">gunicorn -w 2 -b 127.0.0.1:5000 waterMeter:app</span><br></pre></td></tr></table></figure>

<h2 id="3-部署阿里云服务器"><a href="#3-部署阿里云服务器" class="headerlink" title="3.部署阿里云服务器"></a>3.部署阿里云服务器</h2><p>首先初始化服务器并下载项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"></span><br><span class="line">sudo mkdir /app</span><br><span class="line">sudo chmod 777 /app</span><br><span class="line"><span class="built_in">cd</span> /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置git</span></span><br><span class="line">git config --global user.name wiidede</span><br><span class="line">git config --global user.email wiixdede@gmail.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆前后端仓库</span></span><br><span class="line">git <span class="built_in">clone</span> -b dist https://gitee.com/wiidede/water-meter-frontend.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装tree</span></span><br><span class="line">sudo apt install tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录</span></span><br><span class="line">tree -L 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># ├── water-meter-backend</span></span><br><span class="line"><span class="comment"># │   ├── app</span></span><br><span class="line"><span class="comment"># │   ├── assets</span></span><br><span class="line"><span class="comment"># │   ├── base</span></span><br><span class="line"><span class="comment"># │   ├── main</span></span><br><span class="line"><span class="comment"># │   ├── README.md</span></span><br><span class="line"><span class="comment"># │   ├── utils</span></span><br><span class="line"><span class="comment"># │   ├── waterMeter.py</span></span><br><span class="line"><span class="comment"># │   └── 毕业设计.md</span></span><br><span class="line"><span class="comment"># └── water-meter-frontend</span></span><br><span class="line"><span class="comment">#     ├── dist</span></span><br><span class="line"><span class="comment">#     └── README.md</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8 directories, 4 files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo apt install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available/</span><br><span class="line"><span class="comment"># defalut默认被占用 可以先删除它</span></span><br><span class="line">sudo vim default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加server配置</span></span><br><span class="line"><span class="comment"># server &#123;</span></span><br><span class="line"><span class="comment">#     listen       80;</span></span><br><span class="line"><span class="comment">#     server_name  localhost;</span></span><br><span class="line"><span class="comment">#     location / &#123;</span></span><br><span class="line"><span class="comment">#         root   /app/water-meter-frontend/dist;</span></span><br><span class="line"><span class="comment">#         index  index.html;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo nginx -s reload</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo systemctl reload nginx</span><br><span class="line">sudo systemctl restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端配置</span></span><br><span class="line"><span class="built_in">cd</span> /app/water-meter-backend/</span><br><span class="line"></span><br><span class="line">sudo apt install python3-pip</span><br><span class="line"><span class="comment"># sudo pip3 install tensorflow==1.15 # python3.8 无法安装 tf1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用虚拟环境</span></span><br><span class="line">sudo pip3 install virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装python3.6</span></span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3.6</span><br><span class="line">python3.6 -V</span><br><span class="line"></span><br><span class="line">virtualenv venv --python=python3.6</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟环境（venv）</span></span><br><span class="line">pip install gunicorn</span><br><span class="line">pip install flask</span><br><span class="line">pip install flask-cors</span><br><span class="line">pip install tensorflow==1.15</span><br><span class="line">pip install scipy</span><br><span class="line">pip install easydict</span><br><span class="line">pip install Pillow</span><br><span class="line">pip install opencv-python</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt install libgl1-mesa-glx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传输checkpoints</span></span><br><span class="line"><span class="comment"># scp -r file(ubuntu的文件) root(用户名)@xx.xx.xx.xx(公网ip):/home/(目标文件夹)</span></span><br><span class="line">scp -r -i ssh-key.pem /home/robot/dd_demo/watermeter/WaterMeter/checkpoints root@xx.xx.xx.xx:/app/water-meter-backend</span><br><span class="line">gunicorn -w 2 -b 127.0.0.1:5001 waterMeter:app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available/</span><br><span class="line"><span class="comment"># defalut默认被占用 可以先删除它</span></span><br><span class="line">sudo vim default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加这个服务</span></span><br><span class="line"><span class="comment"># proxy服务器</span></span><br><span class="line"><span class="comment"># server &#123;</span></span><br><span class="line"><span class="comment">#     listen       5000;</span></span><br><span class="line"><span class="comment">#     server_name  xx.xx.xx.xx;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     location / &#123;</span></span><br><span class="line"><span class="comment">#         proxy_pass   http://127.0.0.1:5001;  #反向代理</span></span><br><span class="line"><span class="comment">#         proxy_cookie_domain 127.0.0.1 xx.xx.xx.xx; #修改cookie里域名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span></span><br><span class="line"><span class="comment">#         # add_header Access-Control-Allow-Origin *;  #当前端只跨域不带cookie时，可为*</span></span><br><span class="line"><span class="comment">#         # add_header Access-Control-Allow-Credentials true;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/lib/systemd/system</span><br><span class="line">vi water-meter-backend.servier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># [Unit]</span></span><br><span class="line"><span class="comment"># After=syslog.target network.target remote-fs.target nss-lookup.target</span></span><br><span class="line"><span class="comment"># [Service]</span></span><br><span class="line"><span class="comment"># #项目所在目录</span></span><br><span class="line"><span class="comment"># user=root</span></span><br><span class="line"><span class="comment"># WorkingDirectory=/app/water-meter-backend/</span></span><br><span class="line"><span class="comment"># #gunicorn启动命令</span></span><br><span class="line"><span class="comment"># #解释1.先是虚拟环境下的gunicorn所在位置</span></span><br><span class="line"><span class="comment"># #2.--bind 绑定端口 承接上篇所以选用0.0.0.0:8001</span></span><br><span class="line"><span class="comment"># #3.xxx表示项目名称</span></span><br><span class="line"><span class="comment"># ExecStart=/app/water-meter-backend/venv/bin/gunicorn -w 2 -b 127.0.0.1:5001 waterMeter:app</span></span><br><span class="line"><span class="comment"># Restart=on-failure</span></span><br><span class="line"><span class="comment"># [Install]</span></span><br><span class="line"><span class="comment"># WantedBy=multi-user.target</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到开机自启动项</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> water-meter-backend.servier</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>整理一些css样式</title>
    <url>/wiidede-hexo-blog/several-css-style/</url>
    <content><![CDATA[<h1 id="整理一些css样式"><a href="#整理一些css样式" class="headerlink" title="整理一些css样式"></a>整理一些css样式</h1><h2 id="渐变文字"><a href="#渐变文字" class="headerlink" title="渐变文字"></a>渐变文字</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">360deg</span>, #<span class="number">97</span>E9FF <span class="number">0%</span>, #FFFFFF <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">    <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">24</span>, <span class="number">230</span>, <span class="number">255</span>, <span class="number">0.63</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适应多种情况的自动换行"><a href="#适应多种情况的自动换行" class="headerlink" title="适应多种情况的自动换行"></a>适应多种情况的自动换行</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">word-break</span>: keep-all;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">    <span class="attribute">white-space</span>: pre-wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单行超出内容省略"><a href="#单行超出内容省略" class="headerlink" title="单行超出内容省略"></a>单行超出内容省略</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小天才的margin呢"><a href="#小天才的margin呢" class="headerlink" title="小天才的margin呢"></a>小天才的margin呢</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.iconfont</span> + <span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 任意两个连续的 `iconfont` 类中后面一个添加 `margin-left` 属性 */</span></span><br></pre></td></tr></table></figure>

<h2 id="平滑滚动-（直接修改offsetTop都能平滑滚动）"><a href="#平滑滚动-（直接修改offsetTop都能平滑滚动）" class="headerlink" title="平滑滚动 （直接修改offsetTop都能平滑滚动）"></a>平滑滚动 （直接修改offsetTop都能平滑滚动）</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">scroll-behavior</span>:smooth; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>vue隔代组件层层动态插槽并且附带数据</title>
    <url>/wiidede-hexo-blog/vue-slot-with-two-generation/</url>
    <content><![CDATA[<h1 id="vue隔代组件层层动态插槽并且附带数据"><a href="#vue隔代组件层层动态插槽并且附带数据" class="headerlink" title="vue隔代组件层层动态插槽并且附带数据"></a>vue隔代组件层层动态插槽并且附带数据</h1><p>最近写代码，孙子组件有插槽，想要在爷爷组件里面往孙子组件里面插东西，发现插不进去，于是在父组件也建立了一个插槽。</p>
<p>比较特殊的地方在于这个插槽的名字是动态的，而且可能不止一个（v-for根据数据循环判断有多少插槽）</p>
<h2 id="孙子组件"><a href="#孙子组件" class="headerlink" title="孙子组件"></a>孙子组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;(item,index) in config&quot; :key&#x3D;index&gt;</span><br><span class="line">	&lt;span v-if&#x3D;&quot;item.custom&quot;&gt;</span><br><span class="line">        &lt;slot :name&#x3D;&quot;item.custom&quot; :value&#x3D;&quot;item.key&quot; :index&#x3D;&quot;index&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">	&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，孙子组件的具名插槽的名字是动态的，其实也就是由爷爷组件提供的</p>
<h2 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template v-for&#x3D;&quot;item in config&quot; v-slot:[item]&#x3D;&quot;value&quot;&gt;</span><br><span class="line">	&lt;slot :name&#x3D;&quot;item&quot; :value&#x3D;&quot;value.value&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>父组件是一个桥梁，根据数据得到相应需要有的插槽数来创建模板插入孙子组件，由于孙子组件的插槽名是动态的，所以，这里使用v-slot指令，插槽名为item对应的值，同时附带孙子组件的value值。</p>
<p>而模板里面又是一个插槽供爷爷组件进行插入，名字依旧是动态的item的值，附带从孙子组件得到的value</p>
<h2 id="爷爷组件"><a href="#爷爷组件" class="headerlink" title="爷爷组件"></a>爷爷组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template v-slot:slot-name-one&#x3D;&quot;value&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;slot-name-one&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;value&quot;&gt;&#123;&#123; value.value &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;value&quot;&gt;&#123;&#123; value.value &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;template v-slot:slot-name-two&#x3D;&quot;value&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;slot-name-two&quot;&gt;</span><br><span class="line">        &lt;div :class&#x3D;&quot;value.value &#x3D;&#x3D;&#x3D; &#39;a&#39; ? &#39;a&#39; : &#39;other&#39;&quot;&gt;&#123;&#123; value.value &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<p>这样爷爷组件就可以尽情的往孙子组件插入了</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue判断字符串是否溢出来显示弹窗</title>
    <url>/wiidede-hexo-blog/vue-auto-show-tooltip/</url>
    <content><![CDATA[<h1 id="vue判断字符串是否溢出来显示弹窗"><a href="#vue判断字符串是否溢出来显示弹窗" class="headerlink" title="vue判断字符串是否溢出来显示弹窗"></a>vue判断字符串是否溢出来显示弹窗</h1><p>总体的思路就是获取dom元素，根据dom元素的 <code>clientWidth</code> 与 <code>scrollWidth</code> 来判断是否溢出，我这里正好碰到v-for，所以需要动态绑定每一个元素的ref</p>
<h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div v-for&#x3D;&quot;item in items&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">    &lt;el-tooltip</span><br><span class="line">                :disabled&#x3D;&quot;isOverflow($refs[item.id])&quot;</span><br><span class="line">                :content&#x3D;&quot;&#96;$&#123;item.content&#125;&#96;&quot;</span><br><span class="line">                effect&#x3D;&quot;dark&quot;</span><br><span class="line">                placement&#x3D;&quot;top&quot;&gt;</span><br><span class="line">        &lt;span :ref&#x3D;&quot;item.id&quot;&gt;&#123;&#123; item.content &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-tooltip&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="处理函数-isOverflow"><a href="#处理函数-isOverflow" class="headerlink" title="处理函数 isOverflow"></a>处理函数 isOverflow</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">isOverflow(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> element ? element[<span class="number">0</span>].clientWidth &gt;= element[<span class="number">0</span>].scrollWidth : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整理成组件"><a href="#整理成组件" class="headerlink" title="整理成组件"></a>整理成组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tooltip</span><br><span class="line">          :disabled&#x3D;&quot;disabled&quot;</span><br><span class="line">          effect&#x3D;&quot;dark&quot;</span><br><span class="line">          :content&#x3D;&quot;tooltipContent || content&quot;</span><br><span class="line">          placement&#x3D;&quot;top&quot;</span><br><span class="line">          :enterable&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;div ref&#x3D;&quot;overflowTooltipContent&quot;</span><br><span class="line">         :class&#x3D;&quot;className&quot; class&#x3D;&quot;overflow-content&quot; @mouseover&#x3D;&quot;isOverflow&quot;&gt;</span><br><span class="line">      &#123;&#123; content &#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;el-tooltip&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> name: &#39;overflow-tooltip&#39;,</span><br><span class="line"> props: &#123;</span><br><span class="line">  className: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  content: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#39;&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  tooltipContent: &#123;</span><br><span class="line">   type: String,</span><br><span class="line">   default: &#39;&#39;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">   disabled: true</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">  isOverflow() &#123;</span><br><span class="line">   if (this.$refs.overflowTooltipContent) &#123;</span><br><span class="line">    this.disabled &#x3D; this.$refs.overflowTooltipContent.offsetWidth &gt;&#x3D; this.$refs.overflowTooltipContent.scrollWidth;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.overflow-content &#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>整理一些js写法</title>
    <url>/wiidede-hexo-blog/several-js-grammar/</url>
    <content><![CDATA[<h1 id="整理一些js写法"><a href="#整理一些js写法" class="headerlink" title="整理一些js写法"></a>整理一些js写法</h1><h2 id="从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程"><a href="#从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程" class="headerlink" title="从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程"></a>从元素为对象的数组中提取出对象的某属性为x的快速写法，摘自vuex教程</h2><p>说到底是Array的find()、filter()方法</p>
<p>find返回的是数组里第一个符合条件的选项，</p>
<p>filter返回的是数组里符合条件的选项集合，是一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;...&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="filter-其他用法"><a href="#filter-其他用法" class="headerlink" title="filter 其他用法"></a>filter 其他用法</h2><h3 id="去掉数组中值为index的项目"><a href="#去掉数组中值为index的项目" class="headerlink" title="去掉数组中值为index的项目"></a>去掉数组中值为index的项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.arr = <span class="built_in">this</span>.arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item !== index);</span><br></pre></td></tr></table></figure>

<h3 id="判断数组中有没有值为index的项目"><a href="#判断数组中有没有值为index的项目" class="headerlink" title="判断数组中有没有值为index的项目"></a>判断数组中有没有值为index的项目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item === index).length !== <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="反转对象的key和value的值"><a href="#反转对象的key和value的值" class="headerlink" title="反转对象的key和value的值"></a>反转对象的key和value的值</h2><p>如果直接将对象传进去，将会改变原有对象，建议传{…obj}进去</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseKV = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value = obj[k];</span><br><span class="line">  obj[value] = k;</span><br><span class="line">  <span class="keyword">delete</span> obj[k];</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找数组中，对象某个属性值为val的索引-index"><a href="#查找数组中，对象某个属性值为val的索引-index" class="headerlink" title="查找数组中，对象某个属性值为val的索引(index)"></a>查找数组中，对象某个属性值为val的索引(index)</h2><p>优雅一点，可以用lodash的findIndex()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> findElem = <span class="function">(<span class="params">arrayToSearch, attr, val</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrayToSearch.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arrayToSearch[i][attr] === val) &#123;</span><br><span class="line">   <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断页面上的字符是否溢出"><a href="#判断页面上的字符是否溢出" class="headerlink" title="判断页面上的字符是否溢出"></a>判断页面上的字符是否溢出</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isOverflow = <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> element ? element[<span class="number">0</span>].offsetWidth &gt;= element[<span class="number">0</span>].scrollWidth : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>集成为一个<a href="/vue-auto-show-tooltip/#%E6%95%B4%E7%90%86%E6%88%90%E7%BB%84%E4%BB%B6">vue组件</a></p>
<h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timeFormat = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> value === <span class="number">0</span> ? <span class="string">&#x27;-&#x27;</span> : moment(value).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制到剪贴板"><a href="#复制到剪贴板" class="headerlink" title="复制到剪贴板"></a>复制到剪贴板</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> copyToClipboard = <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> tempEl = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">	tempEl.setAttribute(<span class="string">&#x27;value&#x27;</span>, content);</span><br><span class="line">	<span class="built_in">document</span>.body.appendChild(tempEl);</span><br><span class="line">	tempEl.select();</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)) &#123;</span><br><span class="line">		<span class="built_in">this</span>.$message.success(<span class="string">&#x27;复制成功&#x27;</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.$message.error(<span class="string">&#x27;复制失败&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">document</span>.body.removeChild(tempEl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法"><a href="#事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法" class="headerlink" title="事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法"></a>事件中的offsetX，offsetY，只有chrome能算准，火狐firefox会时常为0，这时候就需要换一种算法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//firefox event.offsetX 时常为0</span></span><br><span class="line"><span class="comment">// let ox = event.offsetX; //</span></span><br><span class="line"><span class="comment">// let oy = event.offsetY;</span></span><br><span class="line"><span class="keyword">let</span> srcObj = event.target || event.srcElement;</span><br><span class="line"><span class="keyword">let</span> ox = event.offsetX || (event.clientX - srcObj.getBoundingClientRect().left);</span><br><span class="line"><span class="keyword">let</span> oy = event.offsetY || (event.clientY - srcObj.getBoundingClientRect().top);</span><br></pre></td></tr></table></figure>

<h2 id="div支持拖动并限制四周不超过浏览器页面"><a href="#div支持拖动并限制四周不超过浏览器页面" class="headerlink" title="div支持拖动并限制四周不超过浏览器页面"></a>div支持拖动并限制四周不超过浏览器页面</h2><p>需要拖动的元素：<code>@mousedown.prevent=&quot;move&quot;</code></p>
<p>元素中拖动无法点击的元素：<code>@mousedown.stop</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> move = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> draggableElement = <span class="built_in">this</span>.$refs[<span class="string">&#x27;popper&#x27;</span>] || e.target;        <span class="comment">//获取目标元素</span></span><br><span class="line">    <span class="comment">// 算出鼠标相对元素的位置</span></span><br><span class="line">    <span class="keyword">let</span> disX = e.clientX - draggableElement.offsetLeft;</span><br><span class="line">    <span class="keyword">let</span> disY = e.clientY - draggableElement.offsetTop;</span><br><span class="line">    <span class="built_in">document</span>.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;       <span class="comment">//鼠标按下并移动的事件</span></span><br><span class="line">        <span class="comment">// 用鼠标的位置减去鼠标相对元素的位置，得到元素的位置</span></span><br><span class="line">        <span class="keyword">let</span> left = e.clientX - disX;</span><br><span class="line">        <span class="keyword">let</span> top = e.clientY - disY;</span><br><span class="line">        <span class="keyword">let</span> bottom = <span class="built_in">window</span>.innerHeight - draggableElement.offsetHeight;</span><br><span class="line">        <span class="keyword">let</span> right = <span class="built_in">window</span>.innerWidth - draggableElement.offsetWidth;</span><br><span class="line">        <span class="comment">// 限制拖出页面</span></span><br><span class="line">        top &lt;= <span class="number">0</span> &amp;&amp; (top = <span class="number">0</span>);</span><br><span class="line">        left &lt;= <span class="number">0</span> &amp;&amp; (left = <span class="number">0</span>);</span><br><span class="line">        left &gt;= right &amp;&amp; (left = right);</span><br><span class="line">        top &gt;= bottom &amp;&amp; (top = bottom);</span><br><span class="line">        <span class="comment">// 移动当前元素</span></span><br><span class="line">        draggableElement.style.left = left + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        draggableElement.style.top = top + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">// 这两句如果拖动元素没有设置bottom和right可以去掉</span></span><br><span class="line">        draggableElement.style.bottom = <span class="string">&#x27;unset&#x27;</span>;</span><br><span class="line">        draggableElement.style.right = <span class="string">&#x27;unset&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">document</span>.onmouseup = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="手动排队等待请求，一次仅允许发送n个请求"><a href="#手动排队等待请求，一次仅允许发送n个请求" class="headerlink" title="手动排队等待请求，一次仅允许发送n个请求"></a>手动排队等待请求，一次仅允许发送n个请求</h2><p>如果真的请求特别多，建议去使用更好的（官方一些的）方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handleRequestQueue = <span class="function">(<span class="params">paramsArr, maxLength, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> paramsLength = paramsArr.length;</span><br><span class="line">    <span class="keyword">const</span> requestsQueue = [];</span><br><span class="line">    <span class="keyword">const</span> results = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> req = api.getSomething(param).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> len = results.push(res);</span><br><span class="line">            <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; callback(res);</span><br><span class="line">            <span class="keyword">if</span> (len &lt; paramsLength &amp;&amp; i + <span class="number">1</span> &lt; paramsLength) &#123;</span><br><span class="line">                requestsQueue.shift();</span><br><span class="line">                handleRequest(paramsArr[++i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 所有请求发送完毕</span></span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            results.push(e);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (requestsQueue.push(req) &lt; maxLength) &#123;</span><br><span class="line">            handleRequest(paramsArr[++i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    handleRequest(paramsArr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="30-seconds-of-code"><a href="#30-seconds-of-code" class="headerlink" title="30 seconds of code"></a><a href="https://www.30secondsofcode.org/">30 seconds of code</a></h2><h3 id="javascript-switch-object-代替switch-switch的优雅写法"><a href="#javascript-switch-object-代替switch-switch的优雅写法" class="headerlink" title="javascript-switch-object 代替switch switch的优雅写法"></a><a href="https://www.30secondsofcode.org/blog/s/javascript-switch-object">javascript-switch-object</a> 代替switch switch的优雅写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> switchFn = <span class="function">(<span class="params">lookupObject, defaultCase = <span class="string">&#x27;_default&#x27;</span></span>) =&gt;</span></span><br><span class="line">  expression =&gt; (lookupObject[expression] || lookupObject[defaultCase])();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> knownFruit = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Known fruit&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> unknownFruit = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Unknown fruit&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logFruit = &#123;</span><br><span class="line">  <span class="string">&#x27;apples&#x27;</span>: knownFruit,</span><br><span class="line">  <span class="string">&#x27;oranges&#x27;</span>: knownFruit,</span><br><span class="line">  <span class="string">&#x27;default&#x27;</span>: unknownFruit</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fruitSwitch = switchFn(logFruit, <span class="string">&#x27;default&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fruitSwitch(<span class="string">&#x27;apples&#x27;</span>); <span class="comment">// Logs: &#x27;Known fruit&#x27;</span></span><br><span class="line">fruitSwitch(<span class="string">&#x27;pineapples&#x27;</span>); <span class="comment">// Logs: &#x27;Unknown fruit&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="getURLParameters"><a href="#getURLParameters" class="headerlink" title="getURLParameters"></a><a href="https://www.30secondsofcode.org/js/s/get-url-parameters">getURLParameters</a></h3><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getURLParameters = <span class="function"><span class="params">url</span> =&gt;</span></span><br><span class="line">  (url.match(<span class="regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>) || []).reduce(</span><br><span class="line">    (a, v) =&gt; (</span><br><span class="line">      (a[v.slice(<span class="number">0</span>, v.indexOf(<span class="string">&#x27;=&#x27;</span>))] = v.slice(v.indexOf(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>)), a</span><br><span class="line">    ),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>

<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getURLParameters(<span class="string">&#x27;google.com&#x27;</span>); <span class="comment">// &#123;&#125;</span></span><br><span class="line">getURLParameters(<span class="string">&#x27;http://url.com/page?name=Adam&amp;surname=Smith&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123;name: &#x27;Adam&#x27;, surname: &#x27;Smith&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a><a href="https://www.30secondsofcode.org/js/s/create-element">createElement</a></h3><h4 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createElement = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  el.innerHTML = str;</span><br><span class="line">  <span class="keyword">return</span> el.firstElementChild;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = createElement(</span><br><span class="line">  <span class="string">`&lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Hello!&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(el.className); <span class="comment">// &#x27;container&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ElementUI timePicker 增加此刻按钮 引发的dom操作的学习</title>
    <url>/wiidede-hexo-blog/element-ui-time-picker-add-now-button/</url>
    <content><![CDATA[<h1 id="ElementUI-timePicker-增加此刻按钮-引发的dom操作的学习"><a href="#ElementUI-timePicker-增加此刻按钮-引发的dom操作的学习" class="headerlink" title="ElementUI timePicker 增加此刻按钮 引发的dom操作的学习"></a>ElementUI timePicker 增加此刻按钮 引发的dom操作的学习</h1><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>获取timePicker弹出框的footer元素</p>
<p>替换原来的取消按钮</p>
<p>&lt;template&gt;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-time-picker</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click.native</span>=<span class="string">&quot;handleClickTime&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:picker-options</span>=<span class="string">&quot;&#123;selectableRange: &#x27;18:00:00 - 20:00:00&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">&quot;请选择时间&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-time-picker</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&lt;script&gt;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleClickTime() &#123;</span><br><span class="line">  <span class="keyword">let</span> footer = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.el-time-panel__footer&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">  element.type = <span class="string">&#x27;button&#x27;</span>;</span><br><span class="line">  element.value = <span class="string">&#x27;此刻&#x27;</span>;</span><br><span class="line">  element.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;点击此刻按钮&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  footer.appendChild(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引发的思考"><a href="#引发的思考" class="headerlink" title="引发的思考"></a>引发的思考</h2><p>一开始看到 element UI 不支持 slot ，就开始束手无措，甚至想驳回请求，后来请教了一下组长，直接用 dom 操作加上了 button</p>
<p>所以还是要加强对 JavaScript 的学习</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>一言</title>
    <url>/wiidede-hexo-blog/one-sentence/</url>
    <content><![CDATA[<h1 id="一言"><a href="#一言" class="headerlink" title="一言"></a>一言</h1><blockquote>
<p>我所有的自負皆來自我的自卑，所有的英雄氣概都來自於我的軟弱。嘴裡振振有詞是因為心裡滿是懷疑，深情是因為痛恨自己無情。這世界沒有一件事情是虛空而生的，站在光里，背後就會有陰影，這深夜裡一片寂靜，是因為你還沒有聽見聲音。 ——馬良《坦白书》</p>
</blockquote>
<blockquote>
<p>我所有的自负都来自我的自卑，所有的英雄气概都来自于我内心的软弱，所有的振振有词都因为心中满是怀疑。我假装无情，其实是痛恨自己的深情。我以为人生的意义在于四处游荡流亡，其实只是掩饰至今没有找到愿意驻足的地方。—— 马良《坦白书》</p>
</blockquote>
<blockquote>
<p>佛说：坐亦禅，行亦禅，一花一世界，一叶一如来，春来花自青，秋至叶飘零，无穷般若心自在，语默动静体自然。</p>
</blockquote>
<blockquote>
<p>我们并不内向，只是不擅长对不亲密的人开朗</p>
</blockquote>
<blockquote>
<p>很多年以后，孩子会记住这个时代。在没什么时代的天空这么美了，紫色的流星落下来，紫色的大丽花盛开、破碎，它的花瓣像是紫色的水向着四面八方奔流，熄灭的时候像是烛火在强风来的一瞬间，如果那个时候人类还存在的话。</p>
</blockquote>
<blockquote>
<p>最后留在记忆深处的总是些虚无缥缈的东西，就像你记住一个人往往不是她的美，很多年后你连她的样子都忘记了，可偶然在人流如织的街头问道她惯用的香水味，你在惊悚中下意识地回过头去，却只看见万千过客的背影。你这才想起即便刚才和你擦肩而过的确是她，即便你跟她面面相对，你也未必能认出她今天的样子了。</p>
</blockquote>
<blockquote>
<p>自身不先改变的话，一切都不会改变。</p>
</blockquote>
<blockquote>
<p>佛说：握紧拳头，你的手里是空的；伸开手掌，你拥有全世界。</p>
</blockquote>
<blockquote>
<p>挡在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们我们无能为力……</p>
</blockquote>
<blockquote>
<p>好看的皮囊千篇一律，有趣的灵魂万里挑一。</p>
</blockquote>
<blockquote>
<p>看，那天空的尽头，闪烁着我们的梦想。读，那里是的深处，埋葬着他们的无奈。走，这脚下的路，孤独而没有尽头。尝，这世间的苦，无奈却依然幸福。</p>
</blockquote>
<blockquote>
<p>胆小鬼连幸福都会害怕，碰到棉花都会受伤，有时候还被幸福所伤。——太宰治《人间失格》</p>
</blockquote>
<blockquote>
<p>愿中国青年都摆脱冷气，只是向上走， 不必听自暴自弃者流的话。 能做事的做事，能发声的发声。 有一分热，发一分光。 就令萤火一般，也可以在黑暗里发一点光， 不必等候炬火。 此后如竟没有炬火，我便是唯一的光。 ——鲁迅</p>
</blockquote>
<blockquote>
<p>躯体有尽时，灵魂无绝期 ——《当呼吸化为空气》</p>
</blockquote>
<blockquote>
<p>别因为你要死了才去做或者不去做某件事情，而是要找到自己认为重要的事情，不管什么时候，只要去做。<br>    Then fancies fly away（一切虚妄过眼）<br>    He’ll fear not what men say（他不会在意他人所言）<br>    He’ll labour night and day（他会昼夜不停劳作）<br>    To be a pilgrim（成为朝圣者不断向前）<br>    ——《当呼吸化为空气》</p>
</blockquote>
<blockquote>
<p>生和死，苦难和苍老，都蕴涵在每一个人的体内，总有一天我们会与之遭逢。我们终将浑然难分，像水溶于水中。——《看见》</p>
</blockquote>
<blockquote>
<p>海子有句诗，深得我心：“天空一无所有，为何给我安慰。”——《看见》</p>
</blockquote>
<blockquote>
<p>在清水里呛呛，血水里泡泡，咸水里滚滚 ——《看见》</p>
</blockquote>
<blockquote>
<p>一个梦就是一部著作,而许多著作只是梦</p>
</blockquote>
<blockquote>
<p>昔日玫瑰以其名留芳，今人所持唯玫瑰之名</p>
</blockquote>
<blockquote>
<p>白鹤林的《孤独》里写，“从童年起，我便独自一人，照顾着历代的星辰。”<br>但遇见你以后，念念落地生根，未来欢愉在等。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-cn-115-不同的子序列</title>
    <url>/wiidede-hexo-blog/leetcode-cn-115/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode-cn.com/problems/distinct-subsequences/">题目</a></h1><p>给定一个字符串 <code>s</code> 和一个字符串 <code>t</code> ，计算在 <code>s</code> 的子序列中 <code>t</code> 出现的个数。</p>
<h2 id="递归遍历（超时）"><a href="#递归遍历（超时）" class="headerlink" title="递归遍历（超时）"></a>递归遍历（超时）</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>遍历s，如果首字母相等，去掉s、t的首字母，继续求解</p>
<p>终止条件是t的首字母都被去掉了，也就是匹配成功，count++</p>
<p>应该可以加入记忆优化，但是我有点想不明白了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numDistinct = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function">(<span class="params">s, t</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.length === <span class="number">0</span>) &#123;</span><br><span class="line">            cnt ++</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] === t[<span class="number">0</span>]) &#123;</span><br><span class="line">                dfs(s.slice(i + <span class="number">1</span>), t.slice(<span class="number">1</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(s,t)</span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先初始化表格，每一个格子代表的意 <code>s[i]</code> 的子序列中 <code>t[j]</code> 出现的个数<code>dp[i][j]</code>。</p>
<p>（自己填一下就会有感觉了）</p>
<table>
<thead>
<tr>
<th>t[j]\s[i]</th>
<th>‘’</th>
<th>b</th>
<th>a</th>
<th>b</th>
<th>g</th>
<th>b</th>
<th>a</th>
<th>g</th>
</tr>
</thead>
<tbody><tr>
<td>‘’</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>b</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>g</td>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>我们从<code>i=1</code> <code>j=1</code>开始计算，发现</p>
<p>如果<code>t[j] == s[i]</code>则<code>dp[j][i] = dp[j][i - 1] + dp[j - 1][i - 1]</code>，也就是说，多出来的这个字母和子串的最后一个字母相同，那我们就用都去掉这个字母的结果加上只去掉这个字母能匹配的数量，就是总的数量了</p>
<p>如果<code>t[j] != s[i]</code>则 <code>dp[j][i] = dp[j][i - 1]</code>，也就是说s再多一个字符，也应该和没有这个字符所匹配的子串数目是相等的</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numDistinct = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(t.length + <span class="number">1</span>).fill(<span class="number">0</span>).map(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(s.length + <span class="number">1</span>).fill(<span class="number">0</span>))</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Array</span>(s.length + <span class="number">1</span>).fill(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= t.length; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= s.length; ++ i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[j - <span class="number">1</span>] === s[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[j][i] = dp[j][i - <span class="number">1</span>] + dp[j - <span class="number">1</span>][i - <span class="number">1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[j][i] = dp[j][i - <span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[t.length][s.length]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-cn-40-组合总和 II 以及回溯</title>
    <url>/wiidede-hexo-blog/leetcode-cn-40/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode-cn.com/problems/combination-sum-ii/">题目</a></h1><p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p>
<p>candidates 中的每个数字在每个组合中只能使用一次。</p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>一般的回溯</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> template = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ret = [] <span class="comment">// 结果</span></span><br><span class="line">  <span class="keyword">let</span> dfs = <span class="function">(<span class="params">path, pos</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 该路径不再满足某条件 */</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* 该路径满足某条件，将路径放入结果中*/</span>) &#123;</span><br><span class="line">      ret.push([...path])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历解决</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = pos; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="comment">/* 满足某条件，不再判断此分支 */</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 路径增加正在遍历的节点</span></span><br><span class="line">      path.push(candidates[i])</span><br><span class="line">      <span class="comment">// 递归进去，完成正在遍历节点的路径判断</span></span><br><span class="line">      dfs(path, i + <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// 路径弹出正在遍历的节点，该节点判断完成，等下次循环推入下一个节点</span></span><br><span class="line">      path.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 执行递归</span></span><br><span class="line">  dfs([], <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这道题因为涉及到组合的综合，也就是当前路径的sum，所以我们把sum也作为一个参数一直传进去，如果sum超过了，分支结束，sum正好等于target（满足条件），存入该路径</p>
<p>如果最后结果允许重复的话，这样就可以了</p>
<p>但是解集不允许重复</p>
<p>所以我们加入如下的两行代码，就可以达到去重的目的</p>
<p>最主要的是如何理解 <code>i &gt; pos</code></p>
<p>在回溯过程中，第二个相同元素引发的分支会和之前重复，所以我们应该去除，当然者必须建立在原数组排序号的基础上</p>
<p><code>candidates.sort((a, b) =&gt; a - b)</code></p>
<p><code>if (i &gt; pos &amp;&amp; candidates[i] === candidates[i - 1])</code></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">candidates</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum2 = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret = []</span><br><span class="line">    candidates.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">let</span> dfs = <span class="function">(<span class="params">path, pos, sum</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">            ret.push([...path])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = pos; i &lt; candidates.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; pos &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            path.push(candidates[i])</span><br><span class="line">            dfs(path, i + <span class="number">1</span>, sum + candidates[i])</span><br><span class="line">            path.pop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs([], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
</search>
